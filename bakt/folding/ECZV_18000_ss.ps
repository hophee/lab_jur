%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGAUAAGGCGUUCACGCCGCAUCCGGCAAUAAGUGCUCCGAUGCCUGAUGCGACGCUUGUCGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[79.46474457 135.89259338]
[63.19341278 118.84806824]
[48.82357025 123.15011597]
[34.45372772 127.45216370]
[20.08388519 131.75421143]
[5.71404171 136.05625916]
[-8.65580082 140.35830688]
[-23.02564430 144.66035461]
[-30.56646729 158.29023743]
[-45.20081711 162.44842529]
[-58.14835358 155.17539978]
[-72.51819611 159.47744751]
[-86.88803864 163.77949524]
[-101.25788116 168.08155823]
[-112.11196136 180.37467957]
[-128.12930298 176.85658264]
[-132.83262634 161.14636230]
[-121.38356781 149.40536499]
[-105.55992889 153.71170044]
[-91.19008636 149.40965271]
[-76.82024384 145.10760498]
[-62.45040512 140.80555725]
[-55.62948227 127.61425781]
[-41.11770248 123.04666138]
[-27.32769203 130.29051208]
[-12.95784950 125.98846436]
[1.41199327 121.68641663]
[15.78183556 117.38436890]
[30.15167809 113.08232117]
[44.52152252 108.78027344]
[58.89136505 104.47822571]
[58.83123398 96.11319733]
[60.45585632 87.90722656]
[63.69874191 80.19613647]
[68.42718506 73.29547119]
[74.44768524 67.48764038]
[81.51385498 63.01031113]
[89.33654022 60.04671478]
[97.59560394 58.71812439]
[105.95306396 59.07891083]
[114.06690216 61.11431503]
[121.60508728 64.74103546]
[128.25912476 69.81066132]
[133.75671387 76.11572266]
[137.87287903 83.39820099]
[140.43916321 91.36007690]
[141.35057068 99.67552185]
[156.12268066 102.28024292]
[170.89479065 104.88496399]
[185.66691589 107.48968506]
[200.43902588 110.09441376]
[215.21115112 112.69913483]
[229.98326111 115.30385590]
[244.75537109 117.90857697]
[259.68945312 112.68520355]
[270.87982178 122.51502228]
[285.65191650 125.11974335]
[300.42404175 127.72446442]
[315.19616699 130.32919312]
[329.96826172 132.93391418]
[343.88180542 124.94686127]
[358.74771118 130.97882080]
[363.16213989 146.40258789]
[353.73870850 159.38636780]
[337.70626831 159.97010803]
[327.36355591 147.70602417]
[312.59143066 145.10130310]
[297.81930542 142.49658203]
[283.04721069 139.89186096]
[268.27508545 137.28713989]
[254.39759827 142.69682312]
[242.15065002 132.68069458]
[227.37854004 130.07597351]
[212.60643005 127.47125244]
[197.83430481 124.86652374]
[183.06219482 122.26180267]
[168.29006958 119.65708160]
[153.51795959 117.05236053]
[138.74583435 114.44763947]
[124.56327820 133.26589966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[14 19]
[47 79]
[48 78]
[49 77]
[50 76]
[51 75]
[52 74]
[53 73]
[54 72]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
