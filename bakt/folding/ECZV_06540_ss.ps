%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUGAUAAGACGCGUGAGCGUCGCAUCAGGCAUCGUUCACCAUUGCCGGAUGCGGCGUUAACGCCUUAUCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[92.64389801 252.55328369]
[92.64389801 237.55328369]
[92.64389801 222.55328369]
[92.64389801 207.55328369]
[84.90660095 194.82600403]
[92.64389801 181.02583313]
[92.64389801 166.02583313]
[92.64389801 151.02583313]
[92.64389801 136.02583313]
[92.64389801 121.02583313]
[92.64389801 106.02583313]
[89.68606567 101.32973480]
[89.73766327 95.29498291]
[93.29652405 89.83100128]
[94.50352478 74.87963867]
[95.71052551 59.92828369]
[96.91752625 44.97692108]
[90.31576538 30.59890556]
[99.05209351 18.53549767]
[100.25909424 3.58413887]
[101.46609497 -11.36722088]
[102.67308807 -26.31858063]
[103.88008881 -41.26993942]
[105.08708954 -56.22129822]
[106.29408264 -71.17266083]
[107.50108337 -86.12401581]
[108.70808411 -101.07537842]
[109.91508484 -116.02674103]
[111.12207794 -130.97810364]
[104.52032471 -145.35610962]
[113.25665283 -157.41952515]
[114.46365356 -172.37088013]
[115.67064667 -187.32223511]
[116.87764740 -202.27360535]
[103.90760803 -210.39988708]
[96.20970154 -223.62867737]
[95.55286407 -238.92008972]
[102.08801270 -252.76026917]
[114.31343079 -261.96884155]
[129.41981506 -264.42971802]
[143.93580627 -259.57745361]
[154.52575684 -248.52705383]
[158.75614929 -233.81779480]
[155.65490723 -218.82977295]
[145.93464661 -207.00712585]
[131.82901001 -201.06660461]
[130.62200928 -186.11524963]
[129.41500854 -171.16387939]
[128.20800781 -156.21252441]
[134.89610291 -142.90393066]
[126.07344055 -129.77110291]
[124.86643982 -114.81974030]
[123.65944672 -99.86837769]
[122.45244598 -84.91702271]
[121.24544525 -69.96566010]
[120.03844452 -55.01430130]
[118.83145142 -40.06294250]
[117.62445068 -25.11158180]
[116.41744995 -10.16022205]
[115.21045685 4.79113770]
[114.00345612 19.74249649]
[120.69154358 33.05109406]
[111.86888123 46.18392181]
[110.66188049 61.13528061]
[109.45488739 76.08663940]
[108.24788666 91.03800201]
[107.64389801 106.02583313]
[107.64389801 121.02583313]
[107.64389801 136.02583313]
[107.64389801 151.02583313]
[107.64389801 166.02583313]
[107.64389801 181.02583313]
[115.38119507 194.82600403]
[107.64389801 207.55328369]
[107.64389801 222.55328369]
[107.64389801 237.55328369]
[107.64389801 252.55328369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[4 74]
[6 72]
[7 71]
[8 70]
[9 69]
[10 68]
[11 67]
[14 66]
[15 65]
[16 64]
[17 63]
[19 61]
[20 60]
[21 59]
[22 58]
[23 57]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[31 49]
[32 48]
[33 47]
[34 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
