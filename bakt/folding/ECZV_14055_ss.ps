%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGGAUAAGGCGUCCACGCCGCAUCCGACAGUCGAGCAUCAAUGCCUGAUGCGAUGCUGCGCAUCUUAUCAGGAC\
) } def
/len { sequence length } bind def

/coor [
[70.12042236 135.99591064]
[56.96043396 118.33275604]
[42.39630508 121.92249298]
[27.83217812 125.51222992]
[13.26805115 129.10195923]
[-1.29607606 132.69169617]
[-15.86020374 136.28143311]
[-30.42432976 139.87117004]
[-38.62670898 153.11347961]
[-53.44794464 156.54650879]
[-66.02191162 148.64518738]
[-80.58603668 152.23492432]
[-95.15016937 155.82466125]
[-109.71429443 159.41438293]
[-121.16013336 171.15852356]
[-136.98495483 166.85650635]
[-140.90953064 150.93389893]
[-128.89659119 139.77049255]
[-113.30403137 144.85026550]
[-98.73989868 141.26052856]
[-84.17577362 137.67079163]
[-69.61164856 134.08105469]
[-62.14987946 121.24137115]
[-47.43091965 117.39339447]
[-34.01406479 125.30704498]
[-19.44993782 121.71730804]
[-4.88581085 118.12757111]
[9.67831612 114.53783417]
[24.24244308 110.94810486]
[38.80657196 107.35836792]
[53.37069702 103.76863098]
[53.57361984 94.24798584]
[55.70029449 84.96569061]
[59.66259766 76.30636597]
[65.29634857 68.62882233]
[72.36810303 62.25119400]
[80.58482361 57.43774796]
[89.60604858 54.38793945]
[99.05796051 53.22813797]
[108.54891205 54.00640869]
[117.68562317 56.69049454]
[126.08950043 61.16918182]
[133.41232300 67.25688934]
[139.35064697 74.70135498]
[143.65840149 83.19411469]
[146.15711975 92.38325500]
[146.74324036 101.88800049]
[161.44009399 104.88838959]
[176.13694763 107.88877106]
[190.83381653 110.88916016]
[205.53067017 113.88954163]
[220.22753906 116.88993073]
[234.92439270 119.89031219]
[249.99333191 115.06977081]
[260.91574097 125.19648743]
[275.61257935 128.19686890]
[290.30944824 131.19725037]
[305.00631714 134.19764709]
[319.70318604 137.19802856]
[336.43164062 134.44210815]
[343.71072388 149.75390625]
[331.01239014 160.98727417]
[316.70278931 151.89488220]
[302.00592041 148.89450073]
[287.30908203 145.89411926]
[272.61221313 142.89373779]
[257.91534424 139.89334106]
[243.89762878 144.92849731]
[231.92401123 134.58717346]
[217.22714233 131.58679199]
[202.53028870 128.58641052]
[187.83341980 125.58602142]
[173.13656616 122.58563232]
[158.43971252 119.58525085]
[143.74284363 116.58486176]
[131.30474854 134.76358032]
[111.92663574 145.23548889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[14 19]
[47 75]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
