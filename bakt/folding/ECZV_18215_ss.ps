%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGAUAAGGUGUUUACGCCGCAUCCGGCAGUCGUGCGCAGAUGCCUGAUGCGACGCUAACGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[92.81673431 122.11822510]
[82.11512756 112.48649597]
[67.61345673 116.32073975]
[53.11178589 120.15499115]
[38.61011124 123.98924255]
[24.10843658 127.82349396]
[9.60676384 131.65774536]
[-4.89490938 135.49198914]
[-12.87334251 148.87042236]
[-27.63472176 152.55230713]
[-40.33983994 144.86364746]
[-54.84151459 148.69789124]
[-69.34318542 152.53215027]
[-83.84486389 156.36639404]
[-95.09150696 168.30143738]
[-110.98645782 164.26626587]
[-115.17835236 148.41192627]
[-103.35492706 137.04800415]
[-87.67910767 141.86471558]
[-73.17743683 138.03047180]
[-58.67576218 134.19622803]
[-44.17409134 130.36196899]
[-36.92938995 117.39856720]
[-22.27725029 113.30351257]
[-8.72915840 120.99031830]
[5.77251482 117.15606689]
[20.27418709 113.32181549]
[34.77585983 109.48757172]
[49.27753448 105.65332031]
[63.77920914 101.81906891]
[78.28088379 97.98481750]
[85.22986603 80.20462036]
[105.37808990 72.94484711]
[104.78174591 57.95670319]
[104.18539429 42.96856308]
[91.70629120 33.54486847]
[88.25458527 18.29299164]
[95.46006012 4.41440582]
[109.92050934 -1.53784776]
[124.80815887 3.24670410]
[133.09350586 16.50894165]
[130.86447144 31.98684311]
[119.17353821 42.37221527]
[119.76988220 57.36035538]
[120.36623383 72.34849548]
[130.20962524 83.66696930]
[144.97007751 86.33693695]
[159.73054504 89.00690460]
[174.49101257 91.67687225]
[189.25146484 94.34683990]
[204.01193237 97.01680756]
[218.77239990 99.68677521]
[233.53285217 102.35674286]
[248.48988342 97.19940186]
[259.63668823 107.07857513]
[274.39715576 109.74854279]
[289.15762329 112.41851044]
[303.91806030 115.08847809]
[318.67852783 117.75844574]
[333.92211914 111.71150208]
[346.61102295 122.10012817]
[343.69201660 138.23739624]
[328.16790771 143.52267456]
[316.00857544 132.51890564]
[301.24810791 129.84893799]
[286.48764038 127.17897797]
[271.72717285 124.50901031]
[256.96670532 121.83903503]
[243.06546021 127.18735504]
[230.86288452 117.11721039]
[216.10243225 114.44724274]
[201.34196472 111.77727509]
[186.58149719 109.10729980]
[171.82104492 106.43733215]
[157.06057739 103.76736450]
[142.30010986 101.09739685]
[127.53964996 98.42742920]
[121.71845245 114.54943848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[14 19]
[33 45]
[34 44]
[35 43]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
