%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCGAAUAAGGCGGUCGCGCCGCAUCCGACAAUAAGUGCGGUGCCGUUGCCUGAUGCGACGCUGACGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[91.93273926 340.20468140]
[91.93273926 325.20468140]
[91.93273926 310.20468140]
[91.93273926 295.20468140]
[81.25186920 284.88699341]
[81.03818512 269.67486572]
[91.93273926 258.54171753]
[91.93273926 243.54173279]
[91.93273926 228.54173279]
[91.93273926 213.54173279]
[91.93273926 198.54173279]
[91.93273926 183.54173279]
[91.93273926 168.54173279]
[91.93273926 153.54173279]
[91.64888000 138.54441833]
[91.08125305 123.55516052]
[90.51363373 108.56590271]
[84.70787811 94.73502350]
[74.40660858 83.83164215]
[64.10533905 72.92825317]
[53.80406952 62.02486420]
[43.50279999 51.12147903]
[33.20153046 40.21809006]
[22.90025902 29.31470490]
[12.59899044 18.41131783]
[2.29772043 7.50793123]
[-12.62592220 11.13842297]
[-27.36090279 6.80530262]
[-37.94358444 -4.32584381]
[-41.52727890 -19.26079178]
[-37.14799500 -33.98211670]
[-25.98373032 -44.52985764]
[-11.03762245 -48.06672287]
[3.66990423 -43.64131165]
[14.18259716 -32.44404221]
[17.67259598 -17.48692131]
[13.20110703 -2.79333854]
[23.50237656 8.11004829]
[33.80364609 19.01343536]
[44.10491562 29.91682243]
[54.40618515 40.82020950]
[64.70745850 51.72359467]
[75.00872803 62.62698364]
[85.30999756 73.53037262]
[95.61126709 84.43375397]
[110.54415894 85.85103607]
[122.71269989 77.08024597]
[134.88124084 68.30946350]
[147.04977417 59.53868484]
[159.21832275 50.76789856]
[171.38685608 41.99711609]
[175.36546326 26.45523071]
[190.05572510 20.00730324]
[204.18853760 27.59963226]
[206.92239380 43.40803146]
[196.16014099 55.30565262]
[180.15763855 54.16565704]
[167.98910522 62.93643951]
[155.82055664 71.70722198]
[143.65202332 80.47800446]
[131.48347473 89.24878693]
[119.31494141 98.01956940]
[115.65869141 104.07519531]
[110.59956360 107.43008423]
[105.50289154 107.99828339]
[106.07051086 122.98754120]
[106.63813019 137.97679138]
[110.16246033 146.68269348]
[106.93273926 153.54173279]
[106.93273926 168.54173279]
[106.93273926 183.54173279]
[106.93273926 198.54173279]
[106.93273926 213.54173279]
[106.93273926 228.54173279]
[106.93273926 243.54173279]
[106.93273926 258.54171753]
[117.82729340 269.67486572]
[117.61360931 284.88699341]
[106.93273926 295.20468140]
[106.93273926 310.20468140]
[106.93273926 325.20468140]
[106.93273926 340.20468140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 79]
[7 76]
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[15 67]
[16 66]
[17 65]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
