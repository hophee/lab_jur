%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCGGAUAAGACGGAUGGCGUCGCAUCCGACAACCGAUGCCUGAUGCGCCGCUGACGCGACUUAUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[82.39814758 125.75856781]
[70.69715118 110.70849609]
[55.78387833 112.31921387]
[40.87061310 113.92993927]
[25.95734215 115.54065704]
[11.04407406 117.15137482]
[-3.86919451 118.76210022]
[-18.78246307 120.37281799]
[-28.68134308 132.39987183]
[-43.82846451 133.82092285]
[-55.23341370 124.30973053]
[-70.14668274 125.92045593]
[-85.05995178 127.53117371]
[-99.97322083 129.14189148]
[-111.11316681 140.68664551]
[-127.07063293 139.03172302]
[-135.60441589 125.44665527]
[-130.16813660 110.35273743]
[-114.93202972 105.32873535]
[-101.58393860 114.22862244]
[-86.67066956 112.61790466]
[-71.75740051 111.00718689]
[-56.84413528 109.39646912]
[-47.73303604 97.66942596]
[-32.63180542 95.82347870]
[-20.39318275 105.45954895]
[-5.47991467 103.84883118]
[9.43335438 102.23810577]
[24.34662247 100.62738800]
[39.25989151 99.01667023]
[54.17316055 97.40595245]
[69.08642578 95.79522705]
[72.45387268 85.35282898]
[79.22827148 76.72201538]
[88.57176971 70.97028351]
[99.32873535 68.80899811]
[110.16872406 70.50549316]
[119.75102234 75.84992218]
[126.89047241 84.18128967]
[130.70405579 94.46915436]
[145.67280579 95.43677521]
[160.64157104 96.40440369]
[175.61032104 97.37203217]
[190.57908630 98.33966064]
[205.54783630 99.30728149]
[220.51660156 100.27490997]
[235.48535156 101.24253845]
[249.75590515 94.41158295]
[261.95755005 102.95378113]
[276.22808838 96.12282562]
[288.42974854 104.66502380]
[303.39849854 105.63265228]
[318.36724854 106.60028076]
[332.82092285 98.85282898]
[346.61276245 107.72512054]
[345.55487061 124.09011078]
[330.73553467 131.11289978]
[317.39962769 121.56903839]
[302.43087769 120.60140991]
[287.46209717 119.63378143]
[274.26223755 126.53395081]
[260.98992920 117.92253876]
[247.79003906 124.82270813]
[234.51773071 116.21129608]
[219.54896545 115.24366760]
[204.58021545 114.27603912]
[189.61145020 113.30841827]
[174.64270020 112.34078979]
[159.67393494 111.37316132]
[144.70518494 110.40553284]
[129.73641968 109.43791199]
[118.69374847 124.97744751]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[11 23]
[12 22]
[13 21]
[14 20]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[49 62]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
