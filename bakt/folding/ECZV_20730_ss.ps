%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGAUAAGGCGUUCACGCCGCAUCCGGCAGUCGGCACACAAUGCCUGAUGCGACGCUUGACGCGUCUUAUCAUGCC\
) } def
/len { sequence length } bind def

/coor [
[81.21126556 124.32452393]
[74.06290436 115.10758972]
[59.62607956 119.17919159]
[45.18925095 123.25080109]
[30.75242233 127.32241058]
[16.31559372 131.39401245]
[1.87876463 135.46562195]
[-12.55806351 139.53723145]
[-20.31597519 153.04472351]
[-35.01497269 156.96826172]
[-47.84450150 149.48902893]
[-62.28133011 153.56063843]
[-76.71816254 157.63224792]
[-91.15499115 161.70385742]
[-102.20434570 173.82176208]
[-118.16334534 170.04786682]
[-122.61473846 154.26441956]
[-110.97930908 142.70808411]
[-95.22659302 147.26702881]
[-80.78976440 143.19541931]
[-66.35293579 139.12380981]
[-51.91610718 135.05220032]
[-44.88502121 121.97170258]
[-30.30202675 117.63685608]
[-16.62967110 125.10039520]
[-2.19284201 121.02879333]
[12.24398613 116.95718384]
[26.68081474 112.88558197]
[41.11764526 108.81397247]
[55.55447388 104.74236298]
[69.99130249 100.67076111]
[71.14591980 88.60165405]
[77.11117554 77.59194183]
[87.21172333 69.53610229]
[100.03819275 65.95314789]
[113.64081573 67.70837402]
[115.98733521 52.89305115]
[118.33385468 38.07772446]
[120.68036652 23.26239967]
[112.45171356 9.49037170]
[118.22330475 -5.47853804]
[133.56767273 -10.16146374]
[146.71394348 -0.96606481]
[147.57740784 15.05373478]
[135.49569702 25.60891724]
[133.14916992 40.42424011]
[130.80265808 55.23956680]
[128.45614624 70.05489349]
[137.27291870 82.19014740]
[152.08824158 84.53666687]
[166.90357971 86.88317871]
[181.71890259 89.22969818]
[196.53422546 91.57621765]
[211.37487793 86.09299469]
[222.73507690 95.72602081]
[237.55039978 98.07254028]
[252.36572266 100.41905212]
[267.18103027 102.76557159]
[281.99636841 105.11209106]
[295.76840210 96.88343048]
[310.73730469 102.65502167]
[315.42022705 117.99939728]
[306.22482300 131.14566040]
[290.20504761 132.00912476]
[279.64984131 119.92741394]
[264.83453369 117.58089447]
[250.01921082 115.23438263]
[235.20387268 112.88786316]
[220.38854980 110.54134369]
[206.60758972 116.19240570]
[194.18769836 106.39154053]
[179.37237549 104.04502106]
[164.55705261 101.69850922]
[149.74172974 99.35198975]
[134.92640686 97.00547028]
[132.79983521 110.15125275]
[126.01484680 121.28842926]
[115.75103760 128.87910461]
[103.64870453 131.96794128]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[14 19]
[36 48]
[37 47]
[38 46]
[39 45]
[49 75]
[50 74]
[51 73]
[52 72]
[53 71]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
