%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCGGAAAAGGUGUUCACGCCGCAUCCGGCAUUCGGUGCUCAAUGCCUGAUGCGACGCUUACCGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[70.53475189 117.45980835]
[63.10688400 123.23398590]
[55.61699677 121.98506165]
[41.18016815 126.05666351]
[26.74333954 130.12826538]
[12.30651093 134.19987488]
[-2.13031769 138.27148438]
[-7.58530331 152.67805481]
[-20.32840729 161.01272583]
[-35.35802078 160.25459290]
[-46.92085648 150.90371704]
[-61.35768509 154.97532654]
[-75.79450989 159.04693604]
[-90.23133850 163.11854553]
[-101.28070068 175.23645020]
[-117.23970032 171.46255493]
[-121.69109344 155.67910767]
[-110.05566406 144.12277222]
[-94.30294800 148.68171692]
[-79.86611938 144.61010742]
[-65.42929077 140.53849792]
[-50.99246216 136.46688843]
[-46.01934052 122.45240021]
[-33.60061264 113.95303345]
[-18.38047791 114.40125275]
[-6.20192432 123.83465576]
[8.23490429 119.76304626]
[22.67173195 115.69144440]
[37.10856247 111.61983490]
[51.54539108 107.54823303]
[65.89949799 103.19396210]
[65.98853302 95.96691895]
[67.59216309 88.91947174]
[70.63898468 82.36547089]
[74.99330902 76.59676361]
[80.46123505 71.87025452]
[86.79926300 68.39642334]
[93.72513580 66.32995605]
[100.93045044 65.76288605]
[108.09432983 66.72045898]
[114.89775085 69.16004181]
[121.03774261 72.97299194]
[126.24088287 77.98950195]
[130.27546692 83.98619080]
[132.96182251 90.69600677]
[134.18031311 97.82014465]
[148.99563599 100.16665649]
[163.81097412 102.51317596]
[178.62629700 104.85969543]
[193.44161987 107.20620728]
[208.25694275 109.55272675]
[223.07226562 111.89924622]
[237.88758850 114.24575806]
[252.72824097 108.76254272]
[264.08843994 118.39556885]
[278.90377808 120.74208069]
[293.71908569 123.08860016]
[308.53442383 125.43511963]
[323.34973145 127.78163147]
[337.12176514 119.55297852]
[352.09066772 125.32456970]
[356.77359009 140.66894531]
[347.57821655 153.81520081]
[331.55841064 154.67866516]
[321.00323486 142.59695435]
[306.18789673 140.25044250]
[291.37255859 137.90393066]
[276.55725098 135.55740356]
[261.74191284 133.21089172]
[247.96096802 138.86195374]
[235.54107666 129.06108093]
[220.72575378 126.71456909]
[205.91043091 124.36804962]
[191.09509277 122.02153778]
[176.27976990 119.67501831]
[161.46444702 117.32849884]
[146.64912415 114.98198700]
[131.83380127 112.63546753]
[114.89775085 130.83995056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[11 22]
[12 21]
[13 20]
[14 19]
[46 78]
[47 77]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[53 71]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
