%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCGGAUAAGGCGUUCACGCCGCAUCCGGCAUCCGAGCACCAUUGCCUGAUGCGACGCUUACGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[70.56041718 115.54156494]
[56.05873871 119.37581635]
[41.55706787 123.21006775]
[27.05539322 127.04431152]
[12.55371952 130.87857056]
[-1.94795346 134.71281433]
[-16.44962692 138.54705811]
[-30.95129967 142.38131714]
[-38.92973328 155.75973511]
[-53.69111252 159.44163513]
[-66.39623260 151.75297546]
[-80.89790344 155.58721924]
[-95.39958191 159.42146301]
[-109.90125275 163.25572205]
[-121.14789581 175.19075012]
[-137.04284668 171.15557861]
[-141.23474121 155.30123901]
[-129.41131592 143.93731689]
[-113.73550415 148.75404358]
[-99.23382568 144.91979980]
[-84.73215485 141.08554077]
[-70.23048401 137.25129700]
[-62.98577881 124.28788757]
[-48.33364105 120.19283295]
[-34.78554916 127.87963867]
[-20.28387642 124.04538727]
[-5.78220272 120.21114349]
[8.71947002 116.37689209]
[23.22114372 112.54264069]
[37.72281647 108.70838928]
[52.22449112 104.87414551]
[66.72616577 101.03989410]
[67.32125092 93.64949036]
[69.53732300 86.57408905]
[73.26445770 80.16466522]
[78.31777191 74.73915100]
[84.44660950 70.56665802]
[91.34693909 67.85417175]
[98.67650604 66.73623657]
[106.07171631 67.26830292]
[113.16574097 69.42398071]
[119.60670471 73.09634399]
[125.07510376 78.10322571]
[129.29968262 84.19626617]
[132.07089233 91.07322693]
[133.25126648 98.39299011]
[148.01173401 101.06296539]
[162.77220154 103.73293304]
[177.53265381 106.40290070]
[192.29312134 109.07286835]
[207.05358887 111.74283600]
[221.81405640 114.41280365]
[236.57450867 117.08277130]
[251.53152466 111.92543030]
[262.67834473 121.80460358]
[277.43881226 124.47457123]
[292.19924927 127.14453888]
[306.95971680 129.81451416]
[321.72018433 132.48448181]
[336.96377563 126.43753052]
[349.65267944 136.82615662]
[346.73367310 152.96342468]
[331.20956421 158.24870300]
[319.05023193 147.24493408]
[304.28976440 144.57496643]
[289.52929688 141.90499878]
[274.76882935 139.23503113]
[260.00836182 136.56506348]
[246.10711670 141.91337585]
[233.90454102 131.84323120]
[219.14408875 129.17326355]
[204.38362122 126.50329590]
[189.62315369 123.83332825]
[174.86268616 121.16336060]
[160.10223389 118.49339294]
[145.34176636 115.82342529]
[130.58129883 113.15345764]
[113.41345215 130.46815491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[14 19]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
