%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGAUAAGGCGUUAACGCCGCAUCCGGCAAUGGUGAACGAUGCCUGAUGCGACGCUCACGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[79.65251160 133.34910583]
[64.56924438 116.45735931]
[50.00511551 120.04708862]
[35.44099045 123.63682556]
[20.87686157 127.22656250]
[6.31273508 130.81629944]
[-8.25139236 134.40603638]
[-22.81551933 137.99575806]
[-31.01789856 151.23806763]
[-45.83913040 154.67109680]
[-58.41310120 146.76977539]
[-72.97722626 150.35951233]
[-87.54135895 153.94924927]
[-102.10548401 157.53898621]
[-113.55132294 169.28312683]
[-129.37614441 164.98110962]
[-133.30070496 149.05848694]
[-121.28778076 137.89509583]
[-105.69522095 142.97485352]
[-91.13108826 139.38511658]
[-76.56696320 135.79539490]
[-62.00283432 132.20565796]
[-54.54106903 119.36596680]
[-39.82210922 115.51799011]
[-26.40525436 123.43164062]
[-11.84112740 119.84190369]
[2.72300005 116.25216675]
[17.28712654 112.66242981]
[31.85125542 109.07270050]
[46.41538239 105.48296356]
[60.97950745 101.89322662]
[61.54459000 93.11781311]
[64.05809784 84.69109344]
[68.39267731 77.04003143]
[74.32870483 70.55229187]
[81.56542206 65.55657959]
[89.73616791 62.30601120]
[98.42695618 60.96529007]
[107.19744110 61.60234451]
[115.60325623 64.18489838]
[123.21849823 68.58209991]
[129.65731812 74.57115173]
[134.59350586 81.84861755]
[137.77691650 90.04575348]
[139.04629517 98.74724579]
[153.85205078 101.15341187]
[168.65780640 103.55958557]
[183.46356201 105.96575165]
[198.26931763 108.37191772]
[213.07507324 110.77809143]
[227.88082886 113.18425751]
[242.68658447 115.59043121]
[257.54919434 110.16703033]
[268.87051392 119.84573364]
[283.67623901 122.25189972]
[298.48199463 124.65806580]
[313.28775024 127.06423950]
[328.09350586 129.47041321]
[343.22677612 123.15243530]
[356.09902954 133.31298828]
[353.46841431 149.49977112]
[338.04107666 155.06120300]
[325.68734741 144.27615356]
[310.88159180 141.86999512]
[296.07583618 139.46382141]
[281.27008057 137.05764771]
[266.46432495 134.65148926]
[252.66072083 140.24699402]
[240.28041077 130.39617920]
[225.47465515 127.99001312]
[210.66889954 125.58384705]
[195.86314392 123.17767334]
[181.05738831 120.77150726]
[166.25163269 118.36533356]
[151.44589233 115.95916748]
[136.64013672 113.55300140]
[122.96499634 131.60366821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[14 19]
[45 76]
[46 75]
[47 74]
[48 73]
[49 72]
[50 71]
[51 70]
[52 69]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
