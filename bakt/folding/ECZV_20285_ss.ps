%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGGAUAAGGCGUUCACGCCGCAUCCGGCAAUUGUGCGCCGAUUGCCUGAUGCGACGCGGGCCGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[87.84530640 339.55941772]
[90.78121948 320.40136719]
[91.36284637 305.41265869]
[91.94448090 290.42395020]
[82.89434052 275.52032471]
[92.50000000 259.95355225]
[92.50000000 244.95353699]
[92.50000000 229.95353699]
[92.50000000 214.95353699]
[92.50000000 199.95353699]
[92.50000000 184.95353699]
[92.50000000 169.95353699]
[92.50000000 154.95353699]
[92.50000000 139.95353699]
[92.50000000 124.95354462]
[79.24299622 115.75043488]
[73.94863129 100.50526428]
[78.64788055 85.06627655]
[91.53805542 75.35604095]
[90.95642853 60.36732101]
[90.37479401 45.37860107]
[89.21240997 30.42370605]
[87.47101593 15.52513123]
[85.72962189 0.62655574]
[83.98822784 -14.27201939]
[82.24683380 -29.17059517]
[80.50543976 -44.06917191]
[71.21835327 -56.87778473]
[77.42579651 -70.41724396]
[75.68440247 -85.31581879]
[73.94300842 -100.21439362]
[72.20161438 -115.11296844]
[70.46022034 -130.01155090]
[68.71882629 -144.91012573]
[66.97743225 -159.80870056]
[65.23603821 -174.70727539]
[53.59407806 -185.74559021]
[55.10904312 -201.71694946]
[68.61878204 -210.36950684]
[83.75977325 -205.06573486]
[88.91715240 -189.87426758]
[80.13461304 -176.44866943]
[81.87600708 -161.55009460]
[83.61740112 -146.65151978]
[85.35879517 -131.75294495]
[87.10018921 -116.85436249]
[88.84158325 -101.95578766]
[90.58297729 -87.05721283]
[92.32437134 -72.15863800]
[101.48690033 -60.41566849]
[95.40401459 -45.81056595]
[97.14540863 -30.91198921]
[98.88680267 -16.01341248]
[100.62819672 -1.11483800]
[102.36959076 13.78373718]
[104.11098480 28.68231201]
[107.44546509 32.43121719]
[108.28097534 38.39002991]
[105.36351776 44.79697037]
[105.94514465 59.78569031]
[106.52677917 74.77440643]
[118.18487549 81.33882141]
[125.04844666 92.82333374]
[125.30788422 106.20000458]
[118.89479065 117.94202423]
[107.50000000 124.95354462]
[107.50000000 139.95353699]
[107.50000000 154.95353699]
[107.50000000 169.95353699]
[107.50000000 184.95353699]
[107.50000000 199.95353699]
[107.50000000 214.95353699]
[107.50000000 229.95353699]
[107.50000000 244.95353699]
[107.50000000 259.95355225]
[116.13771820 269.76010132]
[115.68022156 282.41571045]
[106.93319702 291.00555420]
[106.35157013 305.99429321]
[105.76993561 320.98300171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 80]
[3 79]
[4 78]
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
[11 70]
[12 69]
[13 68]
[14 67]
[15 66]
[19 61]
[20 60]
[21 59]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[29 49]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
