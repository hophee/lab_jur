%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGAUAAGGCGUUCACGCCGCAUCCGGCAGUCGGCGCAUAAUGCCUGAUGCGACGCUUGUCGCGUCUUAUCAUGCC\
) } def
/len { sequence length } bind def

/coor [
[61.65782166 128.10192871]
[56.85582733 119.96048737]
[42.41899872 124.03208923]
[27.98217010 128.10369873]
[13.54534149 132.17530823]
[-0.89148670 136.24691772]
[-15.32831478 140.31851196]
[-29.76514435 144.39012146]
[-37.52305603 157.89762878]
[-52.22205353 161.82115173]
[-65.05158234 154.34193420]
[-79.48841095 158.41354370]
[-93.92523956 162.48513794]
[-108.36206818 166.55674744]
[-119.41142273 178.67466736]
[-135.37042236 174.90075684]
[-139.82182312 159.11730957]
[-128.18638611 147.56097412]
[-112.43367767 152.11991882]
[-97.99684906 148.04830933]
[-83.56002045 143.97671509]
[-69.12319183 139.90510559]
[-62.09210205 126.82460785]
[-47.50910568 122.48976135]
[-33.83675003 129.95329285]
[-19.39992142 125.88169098]
[-4.96309328 121.81008148]
[9.47373486 117.73847961]
[23.91056442 113.66687012]
[38.34739304 109.59526062]
[52.78422165 105.52365875]
[53.61550903 89.59233856]
[59.67050934 74.83309937]
[70.26732635 62.90810776]
[84.21256256 55.16031265]
[99.93575287 52.46226120]
[102.28226471 37.64693832]
[104.62878418 22.83161163]
[106.97530365 8.01628780]
[98.74664307 -5.75574017]
[104.51823425 -20.72464943]
[119.86260986 -25.40757561]
[133.00886536 -16.21217728]
[133.87232971 -0.19237718]
[121.79062653 10.36280441]
[119.44410706 25.17812920]
[117.09759521 39.99345398]
[114.75107574 54.80878067]
[135.53488159 68.42291260]
[146.61178589 90.66283417]
[161.60021973 90.07393646]
[176.58865356 89.48503876]
[191.57708740 88.89614105]
[206.56552124 88.30724335]
[221.55395508 87.71834564]
[236.54238892 87.12944794]
[251.53082275 86.54055023]
[265.10375977 77.33688354]
[279.74081421 84.73206329]
[280.38464355 101.11856842]
[266.37292480 109.63936615]
[252.11972046 101.52898407]
[237.13128662 102.11788177]
[222.14285278 102.70677948]
[207.15441895 103.29567719]
[192.16598511 103.88457489]
[177.17755127 104.47347260]
[162.18911743 105.06237030]
[147.20066833 105.65126801]
[145.14955139 114.87812805]
[141.31344604 123.51679230]
[135.84403992 131.22572327]
[128.95753479 137.70014954]
[120.92620850 142.68412781]
[112.06756592 145.98059082]
[102.73184204 147.45921326]
[93.28811646 147.06156921]
[84.10974121 144.80334473]
[75.55957794 140.77384949]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[14 19]
[36 48]
[37 47]
[38 46]
[39 45]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
