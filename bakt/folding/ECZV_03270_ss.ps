%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGAUAAGGCGUUCACGCCGCAUCCGCCAGUGGCGCGGUGCAGUUGCCGGAUGCAACGCUUGCCGCGUUUUAUCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[82.07614899 133.12986755]
[67.35213470 118.78749084]
[53.12178421 123.53060913]
[38.89143372 128.27372742]
[24.66108322 133.01683044]
[10.43073463 137.75994873]
[-3.79961586 142.50306702]
[-18.02996635 147.24618530]
[-25.14690781 161.10211182]
[-39.64607620 165.70959473]
[-52.81172943 158.83927917]
[-67.04207611 163.58239746]
[-81.27243042 168.32551575]
[-95.50277710 173.06863403]
[-105.97262573 185.69061279]
[-122.09082794 182.66809082]
[-127.27635956 167.11038208]
[-116.19479370 155.02192688]
[-100.24589539 158.83827209]
[-86.01554108 154.09516907]
[-71.78519440 149.35205078]
[-57.55484390 144.60893250]
[-51.14393616 131.21356201]
[-36.77990723 126.20066071]
[-22.77308083 133.01583862]
[-8.54273033 128.27272034]
[5.68761921 123.52960205]
[19.91796875 118.78648376]
[34.14831924 114.04337311]
[48.37866974 109.30025482]
[62.60902023 104.55714417]
[62.78005600 94.20960999]
[65.76059723 84.29915619]
[71.32567596 75.57386780]
[79.05519867 68.69235992]
[88.36572266 64.17407990]
[86.66610718 49.27067947]
[75.05514526 38.19976807]
[76.61488342 22.23271561]
[90.14882660 13.61807823]
[105.27488708 18.96426773]
[110.38964844 34.17014694]
[101.56950378 47.57106400]
[103.26911926 62.47446442]
[114.15422821 65.09282684]
[123.78895569 70.79488373]
[131.32215881 79.07691956]
[136.08837891 89.20729828]
[137.66653442 100.29110718]
[152.34268188 103.39126587]
[167.01881409 106.49143219]
[181.69494629 109.59159088]
[196.37109375 112.69174957]
[211.04722595 115.79191589]
[225.72335815 118.89207458]
[240.39950562 121.99223328]
[255.50083923 117.27417755]
[266.35418701 127.47486115]
[281.03033447 130.57502747]
[295.70648193 133.67518616]
[310.38259888 136.77534485]
[325.05874634 139.87550354]
[339.23309326 132.36100769]
[353.88766479 138.88961792]
[357.78076172 154.45315552]
[347.92590332 167.11259460]
[331.88290405 167.15669250]
[321.95858765 154.55163574]
[307.28244019 151.45147705]
[292.60629272 148.35131836]
[277.93017578 145.25115967]
[263.25402832 142.15100098]
[249.20242310 147.09080505]
[237.29933167 136.66838074]
[222.62319946 133.56820679]
[207.94706726 130.46804810]
[193.27093506 127.36788940]
[178.59478760 124.26773071]
[163.91865540 121.16756439]
[149.24252319 118.06740570]
[134.56637573 114.96724701]
[121.56228638 130.88560486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[14 19]
[36 44]
[37 43]
[49 81]
[50 80]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
