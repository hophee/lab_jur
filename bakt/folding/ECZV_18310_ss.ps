%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCGGAUAAGGCGCUCGCGUCGCAUCCGACACCAUGCGCCGAUGCCUGAUGCGACGCUGACGCGUCUUAUCAUGCC\
) } def
/len { sequence length } bind def

/coor [
[93.74784088 340.28045654]
[93.74784088 325.28045654]
[93.74784088 310.28045654]
[83.06697083 299.96276855]
[82.85329437 284.75064087]
[93.74784088 273.61752319]
[93.74784088 258.61752319]
[93.74784088 243.61752319]
[93.74784088 228.61752319]
[93.74784088 213.61752319]
[93.74784088 198.61752319]
[93.74784088 183.61752319]
[93.74784088 168.61752319]
[93.74784088 153.61752319]
[93.74784088 138.61752319]
[93.44578552 123.62056732]
[92.84179688 108.63272858]
[91.93611908 93.66009521]
[90.72912598 78.70874023]
[89.52212524 63.75737762]
[88.31512451 48.80601883]
[87.10813141 33.85465622]
[85.90113068 18.90329742]
[84.69412994 3.95193839]
[83.48712921 -10.99942112]
[82.28013611 -25.95078087]
[81.07313538 -40.90214157]
[72.25047302 -54.03496933]
[78.93856049 -67.34356689]
[70.11589813 -80.47639465]
[76.80399323 -93.78498840]
[75.59699249 -108.73635101]
[66.77433014 -121.86917877]
[73.46241760 -135.17776489]
[60.60944366 -144.08479309]
[56.53870010 -159.18324280]
[63.17227936 -173.34408569]
[77.37799835 -179.88102722]
[92.44835663 -175.70748901]
[101.26759338 -162.79412842]
[99.67153168 -147.23820496]
[88.41378021 -136.38476562]
[97.15010834 -124.32136536]
[90.54835510 -109.94334412]
[91.75534821 -94.99198914]
[100.49168396 -82.92858124]
[93.88992310 -68.55056000]
[102.62625122 -56.48715591]
[96.02449799 -42.10913849]
[97.23149109 -27.15777969]
[98.43849182 -12.20641994]
[99.64549255 2.74493980]
[100.85248566 17.69629860]
[102.05948639 32.64765930]
[103.26648712 47.59901810]
[104.47348785 62.55037689]
[105.68048096 77.50173950]
[106.88748169 92.45309448]
[110.71440125 99.82266998]
[107.82963562 108.02873993]
[108.43362427 123.01657867]
[111.98675537 131.74029541]
[108.74784088 138.61752319]
[108.74784088 153.61752319]
[108.74784088 168.61752319]
[108.74784088 183.61752319]
[108.74784088 198.61752319]
[108.74784088 213.61752319]
[108.74784088 228.61752319]
[108.74784088 243.61752319]
[108.74784088 258.61752319]
[108.74784088 273.61752319]
[119.64239502 284.75064087]
[119.42871857 299.96276855]
[108.74784088 310.28045654]
[108.74784088 325.28045654]
[108.74784088 340.28045654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[6 72]
[7 71]
[8 70]
[9 69]
[10 68]
[11 67]
[12 66]
[13 65]
[14 64]
[15 63]
[16 61]
[17 60]
[18 58]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[29 47]
[31 45]
[32 44]
[34 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
