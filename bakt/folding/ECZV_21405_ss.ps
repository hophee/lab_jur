%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:49 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGAUAAGGCGCUCGCGCCGCAUCCGGCGGUGGUGCGCUGAAGCCUGAUGCGACGCUUACCGCGUCUUAUCAUGCC\
) } def
/len { sequence length } bind def

/coor [
[100.32711029 391.00100708]
[100.32711029 376.00100708]
[100.32711029 361.00100708]
[89.64623260 350.68331909]
[89.43255615 335.47119141]
[100.32711029 324.33807373]
[100.32711029 309.33807373]
[100.32711029 294.33807373]
[100.32711029 279.33807373]
[100.32711029 264.33807373]
[100.32711029 249.33805847]
[100.32711029 234.33805847]
[100.32711029 219.33805847]
[100.32711029 204.33805847]
[100.32711029 189.33805847]
[85.57028198 176.99017334]
[84.21400452 157.50178528]
[97.51247406 142.79249573]
[95.74941254 127.89646912]
[93.98635101 113.00044250]
[85.77534485 101.68360138]
[91.11762238 88.76261902]
[89.35456085 73.86659241]
[87.59149933 58.97056580]
[85.82843781 44.07453918]
[84.06537628 29.17851257]
[82.30231476 14.28248596]
[72.99661255 1.48739219]
[79.18434906 -12.06108189]
[77.42128754 -26.95710945]
[75.65822601 -41.85313416]
[73.02127838 -56.61953354]
[69.51959991 -71.20508575]
[66.01792145 -85.79063416]
[62.51623917 -100.37618256]
[52.93938828 -114.36618805]
[63.73152542 -127.44158936]
[79.28349304 -120.69084930]
[77.10179138 -103.87786102]
[80.60346985 -89.29231262]
[84.10514832 -74.70676422]
[87.60682678 -60.12121582]
[90.68510437 -57.92280579]
[92.72530365 -53.99332809]
[92.86260986 -48.90327454]
[90.55425262 -43.61619568]
[92.31731415 -28.72017097]
[94.08037567 -13.82414341]
[103.25997162 -2.09451294]
[97.19834137 12.51942539]
[98.96140289 27.41545105]
[100.72446442 42.31147766]
[102.48752594 57.20750427]
[104.25058746 72.10353088]
[106.01364899 86.99955750]
[114.22465515 98.31639862]
[108.88237762 111.23738098]
[110.64543915 126.13340759]
[112.40850067 141.02943420]
[122.58372498 145.54537964]
[129.79960632 153.91412354]
[132.72529602 164.48455811]
[130.86734009 175.21044922]
[124.65134430 184.04643250]
[115.32711029 189.33805847]
[115.32711029 204.33805847]
[115.32711029 219.33805847]
[115.32711029 234.33805847]
[115.32711029 249.33805847]
[115.32711029 264.33807373]
[115.32711029 279.33807373]
[115.32711029 294.33807373]
[115.32711029 309.33807373]
[115.32711029 324.33807373]
[126.22165680 335.47119141]
[126.00798035 350.68331909]
[115.32711029 361.00100708]
[115.32711029 376.00100708]
[115.32711029 391.00100708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[13 67]
[14 66]
[15 65]
[18 59]
[19 58]
[20 57]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[29 48]
[30 47]
[31 46]
[32 42]
[33 41]
[34 40]
[35 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
