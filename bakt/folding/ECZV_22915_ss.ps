%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:49 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGAUAAGGCGCUCGCGCCGCAUCCGGCACCGUUGCCAAACUCCUGUGCCGCAAUAAUGUCGGAUGCGAUGCUUGCGCAUCUUAUCCGACC\
) } def
/len { sequence length } bind def

/coor [
[97.14726257 324.44247437]
[97.14726257 309.44247437]
[89.40996552 296.71520996]
[97.14726257 282.91503906]
[97.14726257 267.91503906]
[97.14726257 252.91503906]
[97.14726257 237.91503906]
[97.14726257 222.91503906]
[97.14726257 207.91503906]
[97.14726257 192.91503906]
[97.14726257 177.91503906]
[96.65131378 162.92323303]
[95.65995026 147.95603943]
[94.66859436 132.98883057]
[93.67723846 118.02162170]
[82.84629059 108.39682007]
[81.88867188 93.93897247]
[91.35556030 82.96973419]
[90.36420441 68.00253296]
[89.37284088 53.03532791]
[80.74039459 39.77668762]
[87.61962891 26.56588173]
[86.62827301 11.59867668]
[85.63690948 -3.36852765]
[84.64555359 -18.33573151]
[83.65419006 -33.30293655]
[82.66283417 -48.27014160]
[81.67147827 -63.23734665]
[80.68011475 -78.20455170]
[79.68875885 -93.17175293]
[78.69740295 -108.13896179]
[77.70603943 -123.10616302]
[66.09951019 -133.49491882]
[65.30735016 -148.68791199]
[75.28296661 -159.68894958]
[74.29160309 -174.65614319]
[73.30024719 -189.62335205]
[72.30889130 -204.59056091]
[71.31752777 -219.55775452]
[58.35419464 -227.87991333]
[52.84132004 -242.07362366]
[56.69769287 -256.61984253]
[68.24182129 -265.99380493]
[67.25046539 -280.96099854]
[57.68547058 -294.28176880]
[64.68474579 -309.11221313]
[81.04804230 -310.19604492]
[89.94219208 -296.41830444]
[82.21766663 -281.95236206]
[83.20902252 -266.98516846]
[95.88865662 -259.21566772]
[101.62987518 -245.30516052]
[98.03720093 -230.50833130]
[86.28473663 -220.54911804]
[87.27609253 -205.58190918]
[88.26744843 -190.61471558]
[89.25881195 -175.64750671]
[90.25016785 -160.68029785]
[101.58959198 -151.09107971]
[102.80818176 -135.92633057]
[92.67324829 -124.09751892]
[93.66460419 -109.13031769]
[94.65596008 -94.16311646]
[95.64732361 -79.19590759]
[96.63867950 -64.22870636]
[97.63003540 -49.26150131]
[98.62139893 -34.29429626]
[99.61275482 -19.32709122]
[100.60411835 -4.35988665]
[101.59547424 10.60731792]
[102.58683014 25.57452202]
[111.14836884 37.76260376]
[104.34004974 52.04396820]
[105.33140564 67.01116943]
[106.32276154 81.97837830]
[117.15370941 91.60317993]
[118.11132812 106.06102753]
[108.64443970 117.03026581]
[109.63579559 131.99746704]
[110.62715912 146.96467590]
[111.61851501 161.93188477]
[115.13780975 167.90888977]
[114.97672272 173.84281921]
[112.14726257 177.91503906]
[112.14726257 192.91503906]
[112.14726257 207.91503906]
[112.14726257 222.91503906]
[112.14726257 237.91503906]
[112.14726257 252.91503906]
[112.14726257 267.91503906]
[112.14726257 282.91503906]
[119.88455963 296.71520996]
[112.14726257 309.44247437]
[112.14726257 324.44247437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[4 91]
[5 90]
[6 89]
[7 88]
[8 87]
[9 86]
[10 85]
[11 84]
[12 81]
[13 80]
[14 79]
[15 78]
[18 75]
[19 74]
[20 73]
[22 71]
[23 70]
[24 69]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[32 61]
[35 58]
[36 57]
[37 56]
[38 55]
[39 54]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
