%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCAGACAAGGCGGUCACGCCGCAUCCGACAUCCAACGCCCGAGCCGGUUGCCUGAUGCGACGCUGACGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[84.41054535 129.98391724]
[71.63832855 118.37612152]
[57.55350494 123.53535461]
[43.46868134 128.69459534]
[33.17171478 140.70637512]
[18.55971909 137.81867981]
[4.47489309 142.97790527]
[0.13289666 157.75807190]
[-11.93846512 167.03900146]
[-26.98216629 167.42767334]
[-39.22354889 158.98452759]
[-53.30837250 164.14376831]
[-67.39319611 169.30299377]
[-81.47802734 174.46223450]
[-91.57244110 187.38642883]
[-107.77249908 184.83885193]
[-113.41297150 169.44024658]
[-102.69142151 157.03137207]
[-86.63726044 160.37741089]
[-72.55242920 155.21817017]
[-58.46760559 150.05894470]
[-44.38278198 144.89970398]
[-40.49139023 130.54718018]
[-28.75600433 121.12673950]
[-13.54593563 120.41455078]
[-0.68434066 128.89308167]
[13.40048504 123.73384857]
[22.69000816 112.09108734]
[38.30944443 114.60976410]
[52.39427185 109.45053101]
[66.47909546 104.29129791]
[66.30166626 97.45278931]
[67.50503540 90.71865845]
[70.03990173 84.36483002]
[73.80239105 78.65166473]
[78.63834381 73.81324768]
[84.34960175 70.04785156]
[90.70213318 67.50975800]
[97.43566132 66.30296326]
[99.64517975 51.46658707]
[101.85470581 36.63021469]
[92.24722290 24.08143806]
[94.40982056 8.42580986]
[107.05947113 -1.04846513]
[122.69136047 1.27953339]
[132.03137207 14.02864456]
[129.53822327 29.63504791]
[116.69108582 38.83974075]
[114.48155975 53.67611313]
[112.27203369 68.51248932]
[128.39898682 81.68159485]
[133.74629211 101.80397797]
[148.17367554 105.90892029]
[162.60105896 110.01386261]
[177.02844238 114.11881256]
[191.45582581 118.22375488]
[205.88320923 122.32869720]
[220.31059265 126.43364716]
[234.73797607 130.53858948]
[250.12875366 126.87325287]
[260.25274658 137.79817200]
[274.68014526 141.90310669]
[289.10751343 146.00805664]
[303.53491211 150.11300659]
[317.96228027 154.21794128]
[333.72549438 149.69540405]
[345.33419800 161.27859497]
[340.84637451 177.05171204]
[324.87869263 180.78872681]
[313.85736084 168.64533997]
[299.42996216 164.54039001]
[285.00259399 160.43544006]
[270.57519531 156.33050537]
[256.14779663 152.22555542]
[241.78898621 156.18450928]
[230.63304138 144.96597290]
[216.20564270 140.86102295]
[201.77825928 136.75608826]
[187.35087585 132.65113831]
[172.92349243 128.54618835]
[158.49610901 124.44124603]
[144.06872559 120.33630371]
[129.64134216 116.23136139]
[117.76126862 128.75071716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[6 27]
[7 26]
[11 22]
[12 21]
[13 20]
[14 19]
[39 50]
[40 49]
[41 48]
[52 83]
[53 82]
[54 81]
[55 80]
[56 79]
[57 78]
[58 77]
[59 76]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
