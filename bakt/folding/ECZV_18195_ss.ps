%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCGGAUAAGGCGUUCACGCCGCAUCCGGCAGUCGUGCGCCAUGCCUGAUGCGACGCUUUGCGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[71.20156860 116.69969177]
[63.67796707 122.35790253]
[56.20549011 120.98541260]
[41.70381546 124.81966400]
[27.20214272 128.65391541]
[12.70046902 132.48815918]
[-1.80120468 136.32240295]
[-16.30287743 140.15666199]
[-24.28131104 153.53509521]
[-39.04269028 157.21697998]
[-51.74781036 149.52832031]
[-66.24948120 153.36256409]
[-80.75115967 157.19682312]
[-95.25283051 161.03106689]
[-106.49947357 172.96609497]
[-122.39442444 168.93092346]
[-126.58631897 153.07658386]
[-114.76289368 141.71266174]
[-99.08708191 146.52938843]
[-84.58540344 142.69514465]
[-70.08373260 138.86088562]
[-55.58205795 135.02664185]
[-48.33735657 122.06324005]
[-33.68521881 117.96818542]
[-20.13712692 125.65498352]
[-5.63545418 121.82073975]
[8.86621952 117.98648834]
[23.36789322 114.15223694]
[37.86956406 110.31798553]
[52.37123871 106.48374176]
[66.79381561 102.36192322]
[67.09461212 94.95369720]
[69.02764130 87.79579163]
[72.49701691 81.24326324]
[77.33063507 75.62113190]
[83.28873444 71.20828247]
[90.07577515 68.22360229]
[97.35509491 66.81515503]
[104.76561737 67.05279541]
[111.93973541 68.92473602]
[118.52160645 72.33811951]
[124.18473816 77.12364197]
[128.64822388 83.04390717]
[131.69064331 89.80525970]
[133.16108704 97.07231140]
[148.01603699 99.15334320]
[162.87097168 101.23437500]
[177.72592163 103.31540680]
[192.58085632 105.39643860]
[207.43580627 107.47747803]
[222.29074097 109.55850983]
[237.14569092 111.63954163]
[251.88584900 105.89163971]
[263.41659546 115.31983948]
[278.27154541 117.40087128]
[293.12649536 119.48190308]
[307.98141479 121.56293488]
[322.83636475 123.64397430]
[336.45895386 115.17018890]
[351.52874756 120.67300415]
[356.48547363 135.93112183]
[347.52679443 149.23982239]
[331.52502441 150.38981628]
[320.75534058 138.49891663]
[305.90039062 136.41787720]
[291.04544067 134.33685303]
[276.19052124 132.25581360]
[261.33557129 130.17477417]
[247.65792847 136.07153320]
[235.06465149 126.49448395]
[220.20971680 124.41345215]
[205.35476685 122.33242035]
[190.49983215 120.25138092]
[175.64488220 118.17034912]
[160.78994751 116.08931732]
[145.93499756 114.00828552]
[131.08006287 111.92725372]
[114.61415100 129.91079712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[14 19]
[45 77]
[46 76]
[47 75]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
