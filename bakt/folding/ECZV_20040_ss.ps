%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCAGAUAAGGCGUUCACGCCGCAUCCGACAUUUGCACAAGAUGCCUGAUGCGACGCUGCCCGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[80.29306793 133.66543579]
[64.90738678 117.03623199]
[50.40571213 120.87047577]
[35.90403748 124.70472717]
[24.54011345 135.71253967]
[10.25788212 131.48558044]
[-4.24379110 135.31983948]
[-18.74546432 139.15408325]
[-26.72389793 152.53251648]
[-41.48527908 156.21440125]
[-54.19039536 148.52574158]
[-68.69207001 152.35998535]
[-83.19374084 156.19424438]
[-97.69541931 160.02848816]
[-108.94206238 171.96353149]
[-124.83700562 167.92835999]
[-129.02890015 152.07402039]
[-117.20548248 140.71009827]
[-101.52966309 145.52680969]
[-87.02799225 141.69256592]
[-72.52632141 137.85832214]
[-58.02464676 134.02406311]
[-50.77994537 121.06066132]
[-36.12780380 116.96560669]
[-22.57971382 124.65241241]
[-8.07804108 120.81816101]
[6.42363262 116.98390961]
[16.75029945 106.25035858]
[32.06978989 110.20305634]
[46.57146072 106.36880493]
[61.07313538 102.53455353]
[61.48987961 93.77943420]
[63.85084915 85.33835602]
[68.03684998 77.63749695]
[73.83654022 71.06562042]
[80.95712280 65.95453644]
[89.03910065 62.56227112]
[97.67445374 61.06008911]
[106.42721558 61.52383041]
[114.85549164 63.93008041]
[122.53377533 68.15735626]
[129.07441711 73.99224854]
[134.14720154 81.14016724]
[137.49603271 89.24024200]
[138.95182800 97.88353729]
[153.80677795 99.96456909]
[168.66171265 102.04560089]
[183.51666260 104.12663269]
[198.37159729 106.20766449]
[213.22654724 108.28870392]
[228.08148193 110.36973572]
[242.93643188 112.45076752]
[257.67657471 106.70286560]
[269.20733643 116.13106537]
[284.06228638 118.21209717]
[298.91723633 120.29312897]
[313.77215576 122.37416840]
[328.62710571 124.45520020]
[342.24969482 115.98141479]
[357.31948853 121.48423004]
[362.27621460 136.74235535]
[353.31753540 150.05105591]
[337.31576538 151.20103455]
[326.54608154 139.31013489]
[311.69113159 137.22911072]
[296.83618164 135.14807129]
[281.98123169 133.06704712]
[267.12631226 130.98600769]
[253.44866943 136.88276672]
[240.85539246 127.30570984]
[226.00045776 125.22467804]
[211.14550781 123.14364624]
[196.29057312 121.06260681]
[181.43562317 118.98157501]
[166.58068848 116.90054321]
[151.72573853 114.81951141]
[136.87080383 112.73847961]
[123.57365417 131.08065796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[14 19]
[45 77]
[46 76]
[47 75]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
