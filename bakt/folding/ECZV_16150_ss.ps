%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAGAUAAGGCAUUUUCGCAGCAUCCGGCACUUAUUGUCGGAUGCGAUGCUUGCGCAUCUUAUCCGACC\
) } def
/len { sequence length } bind def

/coor [
[82.97963715 126.16125488]
[70.94202423 111.39027405]
[56.07035446 113.34816742]
[41.19868088 115.30606079]
[28.52649117 124.77845001]
[14.89818287 118.76858521]
[0.02651033 120.72647858]
[-14.84516239 122.68437195]
[-22.31093407 136.15910339]
[-36.11812592 142.57897949]
[-50.88341904 139.67205811]
[-60.98481369 128.75877380]
[-75.85648346 130.71665955]
[-85.27747345 143.40605164]
[-100.92387390 145.63447571]
[-113.51293945 136.07984924]
[-115.57581329 120.41076660]
[-105.88862610 107.92341614]
[-90.19860840 106.02632141]
[-77.81437683 115.84499359]
[-62.94270706 113.88710022]
[-56.01007462 100.73123932]
[-42.50026321 94.10182953]
[-27.50195312 96.72938538]
[-16.80305481 107.81269836]
[-1.93138254 105.85480499]
[12.94029045 103.89691162]
[24.54875755 94.56455994]
[39.24078751 100.43438721]
[54.11246109 98.47649384]
[68.98413086 96.51860046]
[72.11199951 85.98702240]
[78.69535828 77.19174957]
[87.91849518 71.22255707]
[98.63861084 68.81906891]
[109.52740479 70.27909088]
[119.23570251 75.42171478]
[126.56056976 83.60974884]
[130.59442139 93.82863617]
[145.58013916 94.48292542]
[160.56585693 95.13721466]
[175.55158997 95.79151154]
[190.53730774 96.44580078]
[205.52304077 97.10009003]
[220.50875854 97.75437927]
[235.49447632 98.40866852]
[249.61901855 91.28069305]
[261.99667358 99.56578064]
[276.98239136 100.22006989]
[291.96810913 100.87436676]
[306.95385742 101.52865601]
[321.93957520 102.18294525]
[336.22802734 94.13483429]
[350.20242310 102.71669006]
[349.48709106 119.10022736]
[334.81793213 126.43147278]
[321.28527832 117.16867065]
[306.29956055 116.51438141]
[291.31384277 115.86008453]
[276.32809448 115.20579529]
[261.34237671 114.55150604]
[248.28973389 121.72628784]
[234.84019470 113.39439392]
[219.85446167 112.74010468]
[204.86874390 112.08581543]
[189.88302612 111.43152618]
[174.89729309 110.77722931]
[159.91157532 110.12294006]
[144.92584229 109.46865082]
[129.94012451 108.81436157]
[119.23570251 124.57828522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[6 27]
[7 26]
[8 25]
[12 21]
[13 20]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
