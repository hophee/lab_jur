%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCAGAUAAGGCGUUUUCGCCGCAUCUGACAUUCGCACACGAUGCCUGAUGCGACGCUGGCGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[79.81512451 112.69958496]
[65.25099945 116.28932190]
[50.68687057 119.87905121]
[36.12274551 123.46878815]
[21.55861664 127.05852509]
[6.99449015 130.64825439]
[-7.56963730 134.23799133]
[-22.13376427 137.82772827]
[-30.33614349 151.07003784]
[-45.15737534 154.50306702]
[-57.73134613 146.60174561]
[-72.29547119 150.19148254]
[-86.85959625 153.78121948]
[-101.42372894 157.37094116]
[-112.86956787 169.11508179]
[-128.69438171 164.81307983]
[-132.61895752 148.89045715]
[-120.60602570 137.72705078]
[-105.01346588 142.80682373]
[-90.44933319 139.21708679]
[-75.88520813 135.62734985]
[-61.32107925 132.03761292]
[-53.85931015 119.19792938]
[-39.14035416 115.34995270]
[-25.72349930 123.26360321]
[-11.15937233 119.67386627]
[3.40475512 116.08412933]
[17.96888161 112.49439240]
[32.53300858 108.90466309]
[47.09713745 105.31492615]
[61.66126251 101.72518921]
[76.22539520 98.13545227]
[80.93520355 85.67372894]
[91.59455872 77.68280792]
[90.99057007 62.69497299]
[90.38658142 47.70713806]
[81.16925049 34.14347839]
[88.54969025 19.49898529]
[104.93553925 18.83865929]
[113.47043610 32.84178543]
[105.37442017 47.10314941]
[105.97840881 62.09098434]
[106.58239746 77.07881927]
[117.85018921 84.18611145]
[123.54747772 96.22843933]
[138.35324097 98.63461304]
[153.15899658 101.04077911]
[167.96473694 103.44694519]
[182.77049255 105.85311890]
[197.57624817 108.25928497]
[212.38200378 110.66545868]
[227.18775940 113.07162476]
[242.05036926 107.64822388]
[253.37167358 117.32692719]
[268.17742920 119.73309326]
[282.98318481 122.13926697]
[297.78894043 124.54543304]
[312.59469604 126.95160675]
[327.72793579 120.63362885]
[340.60018921 130.79418945]
[337.96960449 146.98097229]
[322.54226685 152.54240417]
[310.18853760 141.75735474]
[295.38278198 139.35118103]
[280.57702637 136.94502258]
[265.77127075 134.53884888]
[250.96551514 132.13267517]
[237.16189575 137.72817993]
[224.78158569 127.87738037]
[209.97583008 125.47120667]
[195.17007446 123.06504059]
[180.36433411 120.65887451]
[165.55857849 118.25270081]
[150.75282288 115.84653473]
[135.94706726 113.44036102]
[121.14131165 111.03419495]
[109.06890869 122.05591583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[14 19]
[34 43]
[35 42]
[36 41]
[45 76]
[46 75]
[47 74]
[48 73]
[49 72]
[50 71]
[51 70]
[52 69]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
