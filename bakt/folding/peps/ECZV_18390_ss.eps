%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 11 253 690 448
%%HiResBoundingBox: 11.000000 253.000000 689.500000 447.500000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGCCGGAUAAGGCGUUCACGCCGCAUCCGGCAAUGGUGACAAAUGCCUGAUGCGCUACGCUUAUCAGGCC\
) } def
/len { sequence length } bind def
/coor [
[74.85385895 130.47370911]
[62.27425766 111.73642731]
[47.36594009 113.39234161]
[32.45761871 115.04824829]
[17.54930115 116.70416260]
[2.64098334 118.36006927]
[-12.26733494 120.01597595]
[-27.17565346 121.67189026]
[-37.03804016 133.72888184]
[-52.18078232 135.19583130]
[-63.61450577 125.71926117]
[-78.52282715 127.37516785]
[-93.43114471 129.03108215]
[-108.33946228 130.68698120]
[-121.22174072 140.83483887]
[-136.34875488 134.50193787]
[-138.15911865 118.20301819]
[-124.79048920 108.70502472]
[-109.99536896 115.77867126]
[-95.08705139 114.12275696]
[-80.17873383 112.46685028]
[-65.27041626 110.81093597]
[-56.19490051 99.05633545]
[-41.09933472 97.16463470]
[-28.83156395 106.76357269]
[-13.92324543 105.10765839]
[0.98507333 103.45175171]
[15.89339161 101.79583740]
[30.80171013 100.13993073]
[45.71002960 98.48402405]
[60.61834717 96.82810974]
[62.36312485 87.98163605]
[66.06824493 79.76113892]
[71.54071808 72.59480286]
[78.49551392 66.85588074]
[86.57038116 62.84329224]
[95.34474182 60.76603317]
[104.36157990 60.73230362]
[113.15122986 62.74385452]
[121.25589752 66.69591522]
[128.25343323 72.38263702]
[133.77937317 79.50782776]
[137.54589844 87.70037079]
[139.35681152 96.53354645]
[139.11781311 105.54727173]
[153.29939270 110.43428040]
[167.48097229 115.32128906]
[181.66255188 120.20829773]
[195.84411621 125.09530640]
[210.02569580 129.98231506]
[224.20727539 134.86932373]
[238.38885498 139.75633240]
[253.95689392 136.93730164]
[263.46893311 148.39898682]
[277.65051270 153.28599548]
[294.59533691 152.72994995]
[299.82043457 168.85864258]
[285.76852417 178.34442139]
[272.76348877 167.46757507]
[258.58190918 162.58056641]
[244.02824402 165.74916077]
[233.50184631 153.93791199]
[219.32026672 149.05090332]
[205.13868713 144.16389465]
[190.95710754 139.27688599]
[176.77554321 134.38987732]
[162.59396362 129.50286865]
[148.41238403 124.61585999]
[134.23080444 119.72885132]
[117.84613037 135.24899292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[14 19]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[54 60]
[55 59]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
