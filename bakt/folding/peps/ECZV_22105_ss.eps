%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 293 10 407 691
%%HiResBoundingBox: 293.500000 10.000000 407.000000 691.000000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:49 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGCCGGAUAAGGUGCUUGCACCGCAUCCGGCAUCAACGCCUGCACAUUGUCGGAUGCGACGCCGGGGCGUCUUAUCCGACC\
) } def
/len { sequence length } bind def
/coor [
[92.50000000 346.10913086]
[92.50000000 331.10913086]
[84.76270294 318.38186646]
[92.50000000 304.58169556]
[92.50000000 289.58169556]
[92.50000000 274.58169556]
[92.50000000 259.58169556]
[92.50000000 244.58168030]
[92.50000000 229.58168030]
[92.50000000 214.58168030]
[92.50000000 199.58168030]
[92.50000000 184.58168030]
[92.50000000 169.58168030]
[92.50000000 154.58168030]
[92.50000000 139.58168030]
[92.50000000 124.58168030]
[92.50000000 109.58168030]
[91.92546082 94.59268951]
[90.77722168 79.63670349]
[79.06240082 69.37021637]
[78.11097717 54.18635941]
[87.97070312 43.08133698]
[86.82246399 28.12535095]
[85.67422485 13.16936398]
[84.52598572 -1.78662300]
[83.37774658 -16.74260902]
[82.22950745 -31.69859695]
[81.08126831 -46.65458298]
[79.93302917 -61.61057281]
[78.78479004 -76.56655884]
[77.63655090 -91.52254486]
[76.48831177 -106.47853088]
[61.94884491 -110.83380127]
[49.96690369 -120.15032196]
[42.16294098 -133.16810608]
[39.59238815 -148.12660217]
[42.60287857 -163.00279236]
[50.78728104 -175.78482056]
[63.03871536 -184.74398804]
[77.70027161 -188.66867065]
[92.78910828 -187.02806091]
[106.26457214 -180.04406738]
[116.30421448 -168.66117859]
[121.55027008 -154.41886902]
[121.29324341 -139.24328613]
[115.56790161 -125.18680573]
[105.14853668 -114.15043640]
[91.44429779 -107.62677002]
[92.59253693 -92.67078400]
[93.74077606 -77.71479797]
[94.88901520 -62.75880814]
[96.03725433 -47.80282211]
[97.18549347 -32.84683609]
[98.33373260 -17.89084816]
[99.48197174 -2.93486166]
[100.63021088 12.02112484]
[101.77845001 26.97711182]
[102.92668915 41.93309784]
[114.36602783 51.40289307]
[115.74356079 66.55403137]
[105.73320770 78.48846436]
[106.88144684 93.44445038]
[110.17405701 97.88236237]
[110.59332275 103.87560272]
[107.50000000 109.58168030]
[107.50000000 124.58168030]
[107.50000000 139.58168030]
[107.50000000 154.58168030]
[107.50000000 169.58168030]
[107.50000000 184.58168030]
[107.50000000 199.58168030]
[107.50000000 214.58168030]
[107.50000000 229.58168030]
[107.50000000 244.58168030]
[107.50000000 259.58169556]
[107.50000000 274.58169556]
[107.50000000 289.58169556]
[107.50000000 304.58169556]
[115.23729706 318.38186646]
[107.50000000 331.10913086]
[107.50000000 346.10913086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[9 73]
[10 72]
[11 71]
[12 70]
[13 69]
[14 68]
[15 67]
[16 66]
[17 65]
[18 62]
[19 61]
[22 58]
[23 57]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[32 48]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
