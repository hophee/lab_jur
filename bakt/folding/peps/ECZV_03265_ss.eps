%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 11 21 689 680
%%HiResBoundingBox: 11.000000 21.000000 689.000000 680.000000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGGCGGAUAAGGCGUUCACGCCGCAUCCGCCAGUGGCGCGGUGCAGAUGCCGGAUGCGACGCUUGUCGCGUCUUAUCCGACC\
) } def
/len { sequence length } bind def
/coor [
[84.23315430 242.41392517]
[87.15116119 223.25315857]
[87.71878052 208.26390076]
[88.00264740 193.26658630]
[88.00264740 178.26658630]
[88.00264740 163.26658630]
[88.00264740 148.26658630]
[88.00264740 133.26658630]
[88.00264740 118.26658630]
[84.95147705 106.07672119]
[89.65635681 97.66424561]
[78.94986725 87.15848541]
[68.24337769 76.65272522]
[57.53688431 66.14695740]
[46.83039093 55.64119720]
[36.12390137 45.13543701]
[20.54708099 45.11413574]
[9.83883381 34.30728149]
[9.95513630 19.45729446]
[-0.75135541 8.95153332]
[-11.45784760 -1.55422866]
[-22.16433907 -12.05999088]
[-32.87083054 -22.56575203]
[-43.57732391 -33.07151413]
[-48.41179657 -34.08035278]
[-52.16799545 -36.46661377]
[-54.52376938 -39.66146088]
[-55.40028000 -43.04996109]
[-54.95323181 -46.06390762]
[-63.95272446 -58.06428909]
[-72.95221710 -70.06466675]
[-87.29238129 -79.10877991]
[-82.57147217 -95.39218903]
[-65.61755371 -95.36347198]
[-60.95183563 -79.06416321]
[-51.95234299 -67.06378174]
[-42.95285034 -55.06340027]
[-33.07155991 -43.77800751]
[-22.36506844 -33.27224350]
[-11.65857697 -22.76648331]
[-0.95208508 -12.26072025]
[9.75440693 -1.75495827]
[20.46089745 8.75080395]
[35.30602264 8.35349941]
[46.31358719 18.85531807]
[46.62966156 34.42894363]
[57.33615494 44.93470764]
[68.04264832 55.44046783]
[78.74913788 65.94622803]
[89.45562744 76.45199585]
[100.16211700 86.95775604]
[113.99299622 92.76351166]
[128.99031067 93.04737091]
[143.98762512 93.33123016]
[158.98493958 93.61509705]
[173.98225403 93.89895630]
[188.97956848 94.18281555]
[203.97688293 94.46668243]
[218.97419739 94.75054169]
[233.97151184 95.03440094]
[248.05677795 86.63574982]
[262.23892212 94.86973572]
[261.92858887 111.26594543]
[247.44500732 118.95736694]
[233.68765259 110.03171539]
[218.69033813 109.74785614]
[203.69302368 109.46399689]
[188.69570923 109.18013000]
[173.69839478 108.89627075]
[158.70108032 108.61241150]
[143.70376587 108.32854462]
[128.70645142 108.04468536]
[113.70913696 107.76082611]
[103.00264740 118.26658630]
[103.00264740 133.26658630]
[103.00264740 148.26658630]
[103.00264740 163.26658630]
[103.00264740 178.26658630]
[103.00264740 193.26658630]
[106.19499969 202.09960938]
[102.70803833 208.83152771]
[102.14041901 223.82077026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 79]
[5 78]
[6 77]
[7 76]
[8 75]
[9 74]
[11 51]
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[19 43]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[29 37]
[30 36]
[31 35]
[52 73]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
