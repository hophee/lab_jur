%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 11 288 689 413
%%HiResBoundingBox: 11.000000 288.000000 689.000000 413.000000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGUCGGAUAAGGCGCAAGCGCCGCAUCCGACAAGCGAUGCCUGAUGUGACGUUUAACGUGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def
/coor [
[83.52263641 126.49198914]
[71.18498230 111.95925903]
[56.35482025 114.21009064]
[41.52465439 116.46091461]
[26.69449234 118.71174622]
[11.86432743 120.96257782]
[-2.96583605 123.21340942]
[-17.79599953 125.46424103]
[-27.16828537 137.90602112]
[-42.24024200 139.97743225]
[-54.04382706 130.96571350]
[-68.87399292 133.21655273]
[-83.70415497 135.46737671]
[-98.53431702 137.71820068]
[-111.00043488 148.37315369]
[-126.36862183 142.65031433]
[-128.82939148 126.43684387]
[-115.85133362 116.41177368]
[-100.78514862 122.88804626]
[-85.95498657 120.63721466]
[-71.12482452 118.38638306]
[-56.29465866 116.13555145]
[-47.69651794 104.02738953]
[-32.68869019 101.53346252]
[-20.04683113 110.63407898]
[-5.21666718 108.38324738]
[9.61349678 106.13241577]
[24.44366074 103.88158417]
[39.27382278 101.63075256]
[54.10398865 99.37992096]
[68.93415070 97.12908936]
[71.84922028 86.55148315]
[78.24603271 77.63721466]
[87.33342743 71.48883057]
[97.98744965 68.86676025]
[108.89038849 70.09532166]
[118.69374847 75.02255249]
[126.18502045 83.03904724]
[130.43766785 93.15331268]
[145.43420410 93.47605896]
[160.43072510 93.79879761]
[175.42726135 94.12153625]
[190.42378235 94.44428253]
[205.42030334 94.76702118]
[220.41683960 95.08976746]
[235.41336060 95.41250610]
[249.37681580 87.97392273]
[261.93466187 95.98326874]
[276.93118286 96.30601501]
[291.92773438 96.62875366]
[306.92425537 96.95149994]
[317.09454346 85.07299042]
[332.52920532 82.56188202]
[345.94042969 90.60384369]
[350.99584961 105.40170288]
[345.30847168 119.96836090]
[331.56369019 127.42589569]
[316.25134277 124.25308228]
[306.60150146 111.94802094]
[291.60498047 111.62528229]
[276.60845947 111.30254364]
[261.61193848 110.97979736]
[248.72113037 118.44146729]
[235.09062195 110.40903473]
[220.09410095 110.08628845]
[205.09756470 109.76354980]
[190.10104370 109.44081116]
[175.10450745 109.11806488]
[160.10798645 108.79532623]
[145.11146545 108.47258759]
[130.11492920 108.14984131]
[119.75102234 124.15007782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[14 19]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[48 62]
[49 61]
[50 60]
[51 59]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
