%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 11 272 690 429
%%HiResBoundingBox: 11.000000 272.000000 689.500000 429.000000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGCCGGAUAAGCAAAGCGCAUCCGGCAUUCAACGCCUGAUGCGACGCUGGCGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def
/coor [
[86.30171967 128.11866760]
[72.55168915 114.99642944]
[58.04774475 118.82206726]
[43.54379654 122.64771271]
[29.03985214 126.47335052]
[14.53590488 130.29899597]
[0.03195854 134.12463379]
[-14.47198772 137.95027161]
[-22.45836067 151.32397461]
[-37.22192383 154.99710083]
[-49.92247391 147.30088806]
[-64.42642212 151.12654114]
[-78.19967651 161.01257324]
[-91.51218414 150.51431274]
[-85.10946655 134.81585693]
[-68.25206757 136.62258911]
[-53.74811554 132.79695129]
[-46.49572372 119.83784485]
[-31.84115601 115.75148773]
[-18.29763031 123.44632721]
[-3.79368305 119.62068939]
[10.71026325 115.79504395]
[25.21421051 111.96940613]
[39.71815491 108.14376068]
[54.22210312 104.31812286]
[68.72605133 100.49248505]
[70.51123810 89.57334137]
[75.98633575 79.95887756]
[84.46626282 72.85215759]
[94.88990784 69.14243317]
[105.95298767 69.29389954]
[116.27116394 73.28761292]
[124.55334473 80.62383270]
[129.76316833 90.38458252]
[144.72608948 89.33044434]
[159.68899536 88.27629852]
[174.65191650 87.22215271]
[189.61482239 86.16801453]
[204.57774353 85.11386871]
[219.54064941 84.05973053]
[234.50357056 83.00558472]
[247.72587585 74.31758881]
[260.96542358 81.14133453]
[275.92834473 80.08719635]
[290.89123535 79.03305054]
[305.85415649 77.97890472]
[320.81707764 76.92476654]
[334.09759521 67.30397034]
[348.95727539 74.24096680]
[350.10974121 90.59957123]
[336.36944580 99.55145264]
[321.87121582 91.88768005]
[306.90829468 92.94181824]
[291.94540405 93.99596405]
[276.98248291 95.05010986]
[262.01956177 96.10424805]
[249.86750793 104.71684265]
[235.55770874 97.96849823]
[220.59478760 99.02264404]
[205.63188171 100.07678223]
[190.66896057 101.13092804]
[175.70605469 102.18506622]
[160.74313354 103.23921204]
[145.78022766 104.29335785]
[130.81730652 105.34749603]
[122.03146362 122.20173645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[11 17]
[12 16]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
