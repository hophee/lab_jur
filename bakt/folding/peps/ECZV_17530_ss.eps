%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 11 266 689 435
%%HiResBoundingBox: 11.500000 266.000000 688.500000 434.500000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGCCGGAGAAGGCGUUUACGCUGCAUCCGGCAUCCGAGCACCAUUGCCUGAUGCGACGCUUACGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def
/coor [
[79.21477509 134.47389221]
[63.68076706 117.36054993]
[49.17909241 121.19480133]
[34.67742157 125.02904510]
[20.17574692 128.86329651]
[5.67407417 132.69754028]
[-8.82759953 136.53179932]
[-14.51816368 150.84695435]
[-27.39626884 158.97146606]
[-42.41142273 157.96690369]
[-53.81932068 148.42762756]
[-68.32099152 152.26187134]
[-82.82266235 156.09613037]
[-97.32434082 159.93037415]
[-108.57098389 171.86541748]
[-124.46593475 167.83024597]
[-128.65782166 151.97590637]
[-116.83440399 140.61198425]
[-101.15859222 145.42869568]
[-86.65691376 141.59445190]
[-72.15524292 137.76020813]
[-57.65356827 133.92594910]
[-52.45123672 119.99491882]
[-39.89476013 111.70040894]
[-24.68402481 112.39822388]
[-12.66184902 122.03012085]
[1.83982456 118.19586945]
[16.34149742 114.36162567]
[30.84317207 110.52737427]
[45.34484482 106.69312286]
[59.84651947 102.85887146]
[60.15309906 94.28161621]
[62.27103806 85.96430206]
[66.10405731 78.28502655]
[71.47790527 71.59286499]
[78.14831543 66.19202423]
[85.81204987 62.32802963]
[94.12074280 60.17652130]
[102.69669342 59.83530045]
[111.15005493 61.31988144]
[119.09655762 64.56278229]
[126.17498016 69.41658020]
[132.06353760 75.66062927]
[136.49455261 83.01110077]
[139.26661682 91.13385010]
[140.25369263 99.65963745]
[155.01414490 102.32960510]
[169.77461243 104.99957275]
[184.53507996 107.66954041]
[199.29554749 110.33950806]
[214.05599976 113.00947571]
[228.81646729 115.67944336]
[243.57693481 118.34941864]
[258.53393555 113.19207764]
[269.68075562 123.07124329]
[284.44122314 125.74121094]
[299.20169067 128.41117859]
[313.96212769 131.08114624]
[328.72259521 133.75111389]
[343.96618652 127.70417786]
[356.65509033 138.09280396]
[353.73608398 154.23007202]
[338.21197510 159.51533508]
[326.05264282 148.51158142]
[311.29217529 145.84161377]
[296.53170776 143.17164612]
[281.77124023 140.50167847]
[267.01077271 137.83171082]
[253.10952759 143.18002319]
[240.90696716 133.10987854]
[226.14649963 130.43991089]
[211.38603210 127.76994324]
[196.62556458 125.09997559]
[181.86511230 122.43000793]
[167.10464478 119.76003265]
[152.34417725 117.09006500]
[137.58372498 114.42009735]
[123.45848083 132.71353149]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[11 22]
[12 21]
[13 20]
[14 19]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
