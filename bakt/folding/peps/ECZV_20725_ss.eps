%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 304 10 395 691
%%HiResBoundingBox: 304.500000 10.000000 395.000000 691.000000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGCCGGAUAAGGCGUUCACGCCGCAUCCGGCAGUUGGCGCACAAUGCCUGAUGCGACGCUUGACGCGUCUUAUCAUGCC\
) } def
/len { sequence length } bind def
/coor [
[94.45719147 359.12545776]
[94.45719147 344.12545776]
[94.45719147 329.12545776]
[83.77631378 318.80776978]
[83.56263733 303.59564209]
[94.45719147 292.46252441]
[94.45719147 277.46252441]
[94.45719147 262.46252441]
[94.45719147 247.46252441]
[94.45719147 232.46252441]
[94.45719147 217.46252441]
[94.45719147 202.46252441]
[94.45719147 187.46252441]
[94.45719147 172.46252441]
[94.45719147 157.46252441]
[94.16268158 142.46540833]
[93.57378387 127.47697449]
[92.98488617 112.48854065]
[85.68709564 100.56235504]
[92.02667236 88.10035706]
[91.43777466 73.11192322]
[90.26089478 58.15816116]
[88.49783325 43.26213455]
[86.73477173 28.36610794]
[84.97171021 13.47008133]
[83.20864868 -1.42594528]
[81.44558716 -16.32197189]
[72.13988495 -29.11706543]
[78.32762146 -42.66553879]
[76.56455994 -57.56156540]
[74.80149841 -72.45759583]
[73.03843689 -87.35362244]
[68.82431030 -95.76525116]
[71.51044464 -102.86756897]
[70.33355713 -117.82132721]
[69.15667725 -132.77508545]
[57.94035721 -144.24565125]
[60.05805969 -160.14831543]
[73.88526154 -168.28392029]
[88.81491089 -162.41152954]
[93.39426422 -147.03593445]
[84.11043549 -133.95196533]
[85.28732300 -118.99821472]
[86.46421051 -104.04445648]
[87.93446350 -89.11668396]
[89.69752502 -74.22065735]
[91.46058655 -59.32462692]
[93.22364807 -44.42860031]
[102.40324402 -32.69897079]
[96.34161377 -18.08503342]
[98.10467529 -3.18900633]
[99.86773682 11.70702076]
[101.63079834 26.60304832]
[103.39385986 41.49907303]
[105.15692139 56.39509964]
[108.50124359 60.14192200]
[109.34426880 66.10664368]
[106.42621613 72.52302551]
[107.01511383 87.51145935]
[114.31290436 99.43764496]
[107.97332764 111.89964294]
[108.56222534 126.88807678]
[109.15112305 141.87651062]
[112.69228363 150.59284973]
[109.45719147 157.46252441]
[109.45719147 172.46252441]
[109.45719147 187.46252441]
[109.45719147 202.46252441]
[109.45719147 217.46252441]
[109.45719147 232.46252441]
[109.45719147 247.46252441]
[109.45719147 262.46252441]
[109.45719147 277.46252441]
[109.45719147 292.46252441]
[120.35174561 303.59564209]
[120.13806152 318.80776978]
[109.45719147 329.12545776]
[109.45719147 344.12545776]
[109.45719147 359.12545776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[13 67]
[14 66]
[15 65]
[16 63]
[17 62]
[18 61]
[20 59]
[21 58]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[29 48]
[30 47]
[31 46]
[32 45]
[34 44]
[35 43]
[36 42]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
