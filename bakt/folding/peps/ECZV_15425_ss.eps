%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 11 209 690 491
%%HiResBoundingBox: 11.000000 209.500000 689.500000 491.000000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGCCGGAUAAGGCGUCCCCGCCGCAUCCGGCACAGGCACCGUGCUGAUGUCUGAUGCGACGCUGGCGCGUCUUAUCAGACC\
) } def
/len { sequence length } bind def
/coor [
[86.92984772 125.15877533]
[76.19587708 115.39988708]
[61.89493179 119.92568970]
[47.59398651 124.45149994]
[33.29304123 128.97731018]
[18.99209404 133.50311279]
[4.69114876 138.02893066]
[-9.60979652 142.55473328]
[-16.93696594 156.30065918]
[-31.50463104 160.68675232]
[-44.56410980 153.61669922]
[-58.86505890 158.14251709]
[-73.16600037 162.66831970]
[-87.46694946 167.19412231]
[-98.12783813 179.65516663]
[-114.19812775 176.38749695]
[-119.14608765 160.75260925]
[-107.88167572 148.83433533]
[-91.99275970 152.89318848]
[-77.69181061 148.36737061]
[-63.39086533 143.84156799]
[-49.08992004 139.31575012]
[-42.47571945 126.01959229]
[-28.03699875 121.22605896]
[-14.13560581 128.25379944]
[0.16533996 123.72798157]
[14.46628571 119.20217133]
[28.76723099 114.67636871]
[43.06817627 110.15055847]
[57.36912537 105.62474823]
[71.67006683 101.09893799]
[76.20294952 84.58918762]
[89.41390228 73.69929504]
[87.69364929 58.79826355]
[85.97339630 43.89723206]
[72.39102173 36.39398193]
[65.84346008 22.32596588]
[68.84838104 7.10262632]
[80.25032806 -3.42235470]
[95.66502380 -5.20190573]
[109.16519928 2.44824600]
[115.55976868 16.58646202]
[112.38987732 31.77630806]
[100.87442780 42.17697906]
[102.59468079 57.07801056]
[104.31493378 71.97904205]
[116.30744934 76.80819702]
[124.90898132 86.45986176]
[128.33093262 98.92707825]
[142.93635559 102.34487915]
[157.54179382 105.76268005]
[172.14721680 109.18048859]
[186.75265503 112.59828949]
[201.35807800 116.01609039]
[215.96351624 119.43389130]
[230.56895447 122.85169983]
[245.76908875 118.46234131]
[256.39859009 128.89607239]
[271.00402832 132.31387329]
[285.60946655 135.73167419]
[300.21490479 139.14947510]
[314.82031250 142.56727600]
[330.35192871 137.30406189]
[342.49560547 148.32507324]
[338.75900269 164.29284668]
[322.98602295 168.78111267]
[311.40252686 157.17271423]
[296.79708862 153.75491333]
[282.19165039 150.33711243]
[267.58621216 146.91929626]
[252.98078918 143.50149536]
[238.82533264 148.13531494]
[227.15113831 137.45712280]
[212.54571533 134.03932190]
[197.94027710 130.62152100]
[183.33485413 127.20372009]
[168.72941589 123.78591919]
[154.12399292 120.36811829]
[139.51855469 116.95030975]
[124.91312408 113.53250885]
[114.95768738 124.08444214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[14 19]
[33 46]
[34 45]
[35 44]
[49 80]
[50 79]
[51 78]
[52 77]
[53 76]
[54 75]
[55 74]
[56 73]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
