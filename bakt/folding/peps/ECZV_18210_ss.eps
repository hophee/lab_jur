%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 295 10 406 691
%%HiResBoundingBox: 295.000000 10.000000 405.500000 691.000000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGCCGGACAAGACGUUUAUCGCAUCCGGCAGUCGUGUGCAGAUGCCUGAUGCGACGCUAACGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def
/coor [
[92.50000000 311.39364624]
[92.50000000 296.39364624]
[92.50000000 281.39364624]
[92.50000000 266.39364624]
[84.76270294 253.66638184]
[92.50000000 239.86621094]
[92.50000000 224.86621094]
[84.76270294 212.13893127]
[92.50000000 198.33876038]
[92.50000000 183.33876038]
[92.50000000 168.33876038]
[92.50000000 153.33876038]
[92.50000000 138.33876038]
[92.50000000 123.33876038]
[92.50000000 108.33876038]
[92.19402313 93.34188080]
[91.58219147 78.35436249]
[90.97036743 63.36684799]
[89.44301605 48.44480896]
[87.00587463 33.64412308]
[84.56873322 18.84343529]
[82.13159180 4.04274797]
[79.69445038 -10.75793934]
[77.25730896 -25.55862617]
[74.82016754 -40.35931396]
[64.94348145 -52.71899033]
[70.51009369 -66.53427124]
[68.07295227 -81.33496094]
[65.63580322 -96.13565063]
[63.19866562 -110.93633270]
[58.60034943 -119.16402435]
[60.97685242 -126.38938141]
[59.14543533 -141.27716064]
[45.93109512 -149.63868713]
[41.23229218 -164.55361938]
[47.26765823 -178.97958374]
[61.18748093 -186.10507202]
[76.41924286 -182.56565857]
[85.77097321 -170.03253174]
[84.82706451 -154.42346191]
[74.03321075 -143.10858154]
[75.86463165 -128.22079468]
[77.99935150 -113.37347412]
[80.43649292 -98.57279205]
[82.87363434 -83.77210236]
[85.31077576 -68.97141266]
[95.01314545 -57.67038345]
[89.62085724 -42.79645538]
[92.05799866 -27.99576759]
[94.49514008 -13.19508076]
[96.93228149 1.60560608]
[99.36942291 16.40629387]
[101.80656433 31.20697975]
[104.24370575 46.00766754]
[107.17287445 48.42723846]
[108.93112183 52.51551056]
[108.68478394 57.63067245]
[105.95787811 62.75502014]
[106.56970978 77.74253845]
[107.18154144 92.73004913]
[110.71422577 100.25070190]
[107.50000000 108.33876038]
[107.50000000 123.33876038]
[107.50000000 138.33876038]
[107.50000000 153.33876038]
[107.50000000 168.33876038]
[107.50000000 183.33876038]
[107.50000000 198.33876038]
[115.23729706 212.13893127]
[107.50000000 224.86621094]
[107.50000000 239.86621094]
[115.23729706 253.66638184]
[107.50000000 266.39364624]
[107.50000000 281.39364624]
[107.50000000 296.39364624]
[107.50000000 311.39364624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[6 71]
[7 70]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[16 60]
[17 59]
[18 58]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[27 46]
[28 45]
[29 44]
[30 43]
[32 42]
[33 41]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
