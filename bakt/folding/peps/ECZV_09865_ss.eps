%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 302 10 397 691
%%HiResBoundingBox: 302.500000 10.000000 397.000000 691.000000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGUCAGAUAAGGCGCUCGCACCGCAUCCGACAUUGGCAGUGUGCCUGAUGCGACGCUGUUCGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def
/coor [
[94.62739563 348.64071655]
[94.62739563 333.64071655]
[94.62739563 318.64071655]
[94.62739563 303.64071655]
[86.89009857 290.91345215]
[94.62739563 277.11328125]
[94.62739563 262.11328125]
[94.62739563 247.11328125]
[94.62739563 232.11328125]
[94.62739563 217.11328125]
[94.62739563 202.11328125]
[94.62739563 187.11328125]
[94.62739563 172.11328125]
[94.62739563 157.11328125]
[94.62739563 142.11328125]
[83.61155701 126.43180084]
[93.20464325 108.92233276]
[91.67729950 94.00029755]
[89.84588623 79.11251831]
[77.67354584 69.39284515]
[76.02831268 54.26843643]
[85.36954498 42.72387314]
[83.53813171 27.83609390]
[81.70671844 12.94831753]
[79.87530518 -1.93946052]
[78.04388428 -16.82723808]
[76.21247101 -31.71501541]
[69.11561584 -34.70648956]
[63.45061874 -39.84566116]
[59.83443832 -46.52555466]
[58.64513397 -53.97427750]
[59.98260117 -61.34413528]
[63.66116714 -67.80811310]
[69.23448944 -72.65268707]
[76.04943848 -75.35650635]
[77.88085175 -90.24428558]
[79.71226501 -105.13206482]
[81.54368591 -120.01984406]
[77.47644806 -136.47869873]
[92.16616058 -144.94325256]
[104.36643219 -133.17083740]
[96.43145752 -118.18842316]
[94.60004425 -103.30065155]
[92.76863098 -88.41287231]
[90.93721771 -73.52509308]
[103.36129761 -53.97427750]
[91.10025024 -33.54642868]
[92.93166351 -18.65865326]
[94.76307678 -3.77087522]
[96.59449768 11.11690235]
[98.42591095 26.00468063]
[100.25732422 40.89245605]
[112.11801910 49.82887268]
[114.18741608 64.90110779]
[104.73365784 77.28110504]
[106.56507111 92.16888428]
[110.69901276 99.37655640]
[108.15473175 107.69969177]
[117.10558319 114.48618317]
[120.61574554 124.92119598]
[117.70631409 135.30783081]
[109.62739563 142.11328125]
[109.62739563 157.11328125]
[109.62739563 172.11328125]
[109.62739563 187.11328125]
[109.62739563 202.11328125]
[109.62739563 217.11328125]
[109.62739563 232.11328125]
[109.62739563 247.11328125]
[109.62739563 262.11328125]
[109.62739563 277.11328125]
[117.36469269 290.91345215]
[109.62739563 303.64071655]
[109.62739563 318.64071655]
[109.62739563 333.64071655]
[109.62739563 348.64071655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[6 71]
[7 70]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[17 58]
[18 56]
[19 55]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[35 45]
[36 44]
[37 43]
[38 42]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
