%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 11 234 689 467
%%HiResBoundingBox: 11.500000 234.000000 689.000000 466.500000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:49 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGCCGGAUAAGGCGUUUACGCCGCAUCCGGCAACAGUGCCGACUGCCUGAUGCGACGCUCGCGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def
/coor [
[91.03466797 124.24950409]
[79.19221497 112.85311890]
[64.62808990 116.44284821]
[50.06396484 120.03258514]
[35.49983597 123.62232208]
[20.93570900 127.21205902]
[6.37158203 130.80178833]
[-8.19254494 134.39152527]
[-16.39492416 147.63383484]
[-31.21615791 151.06686401]
[-43.79012680 143.16554260]
[-58.35425186 146.75527954]
[-72.91838074 150.34501648]
[-87.48250580 153.93475342]
[-98.92835236 165.67887878]
[-114.75316620 161.37687683]
[-118.67773438 145.45425415]
[-106.66480255 134.29084778]
[-91.07224274 139.37062073]
[-76.50811768 135.78088379]
[-61.94398880 132.19114685]
[-47.37985992 128.60140991]
[-39.91809464 115.76172638]
[-25.19913483 111.91374969]
[-11.78227997 119.82740021]
[2.78184700 116.23766327]
[17.34597397 112.64792633]
[31.91010094 109.05819702]
[46.47422791 105.46846008]
[61.03835678 101.87872314]
[75.60248566 98.28898621]
[77.45937347 87.33763123]
[84.22978973 77.77693939]
[95.00251007 71.79296875]
[107.91068268 71.01759338]
[108.51467133 56.02976227]
[109.11865997 41.04192734]
[101.02263641 26.78056335]
[109.55754089 12.77743816]
[125.94338226 13.43776512]
[133.32382202 28.08225632]
[124.10649109 41.64591599]
[123.50250244 56.63375092]
[122.89851379 71.62158203]
[132.38519287 83.24066162]
[147.19094849 85.64682770]
[161.99670410 88.05300140]
[176.80245972 90.45916748]
[191.60821533 92.86533356]
[206.41397095 95.27150726]
[221.21972656 97.67767334]
[236.02548218 100.08384705]
[250.88809204 94.66044617]
[262.20938110 104.33914185]
[277.01513672 106.74531555]
[291.82089233 109.15148163]
[306.62664795 111.55765533]
[321.43240356 113.96382141]
[336.56567383 107.64585114]
[349.43792725 117.80641174]
[346.80731201 133.99319458]
[331.37997437 139.55462646]
[319.02624512 128.76957703]
[304.22048950 126.36341095]
[289.41473389 123.95723724]
[274.60897827 121.55107117]
[259.80322266 119.14489746]
[245.99961853 124.74040222]
[233.61930847 114.88959503]
[218.81355286 112.48342896]
[204.00779724 110.07726288]
[189.20204163 107.67108917]
[174.39628601 105.26492310]
[159.59053040 102.85874939]
[144.78477478 100.45258331]
[129.97903442 98.04641724]
[123.67095184 116.13374329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[14 19]
[35 44]
[36 43]
[37 42]
[45 76]
[46 75]
[47 74]
[48 73]
[49 72]
[50 71]
[51 70]
[52 69]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
