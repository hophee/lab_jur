%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 314 10 385 691
%%HiResBoundingBox: 314.500000 10.000000 385.000000 691.000000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGCCGGAUAGGGCGUUCACGCCGCAUCCGGCAGCCGUUGCCUGAUGCGACGCUGUGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def
/coor [
[92.50000000 356.40197754]
[92.50000000 341.40197754]
[92.50000000 326.40197754]
[92.50000000 311.40197754]
[84.76270294 298.67468262]
[92.50000000 284.87451172]
[92.50000000 269.87451172]
[92.50000000 254.87451172]
[92.50000000 239.87451172]
[92.50000000 224.87451172]
[92.50000000 209.87451172]
[92.50000000 194.87451172]
[92.50000000 179.87451172]
[92.50000000 164.87451172]
[92.50000000 149.87451172]
[84.76270294 137.14724731]
[92.50000000 123.34707642]
[92.50000000 108.34707642]
[92.16816711 93.35074615]
[91.50466919 78.36542511]
[83.16451263 64.92100525]
[90.33126831 51.86394501]
[89.66777039 36.87862778]
[89.00427246 21.89331055]
[88.34076691 6.90799141]
[87.67726898 -8.07732677]
[87.01377106 -23.06264496]
[78.67361450 -36.50706482]
[85.84037018 -49.56412506]
[85.17687225 -64.54944611]
[84.51337433 -79.53475952]
[83.84986877 -94.52008057]
[73.03342438 -106.36845398]
[75.69510651 -122.18917084]
[89.79310608 -129.84593201]
[104.51264954 -123.46511078]
[108.56214905 -107.94155121]
[98.83518982 -95.18357849]
[99.49868774 -80.19826508]
[100.16219330 -65.21294403]
[100.82569122 -50.22762680]
[109.11838531 -37.85505676]
[101.99908447 -23.72614479]
[102.66259003 -8.74082661]
[103.32608795 6.24449158]
[103.98958588 21.22980881]
[104.65309143 36.21512985]
[105.31658936 51.20044708]
[113.60928345 63.57301331]
[106.48999023 77.70192719]
[107.15348816 92.68724823]
[110.72327423 100.22733307]
[107.50000000 108.34707642]
[107.50000000 123.34707642]
[115.23729706 137.14724731]
[107.50000000 149.87451172]
[107.50000000 164.87451172]
[107.50000000 179.87451172]
[107.50000000 194.87451172]
[107.50000000 209.87451172]
[107.50000000 224.87451172]
[107.50000000 239.87451172]
[107.50000000 254.87451172]
[107.50000000 269.87451172]
[107.50000000 284.87451172]
[115.23729706 298.67468262]
[107.50000000 311.40197754]
[107.50000000 326.40197754]
[107.50000000 341.40197754]
[107.50000000 356.40197754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[6 65]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[17 54]
[18 53]
[19 51]
[20 50]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[29 41]
[30 40]
[31 39]
[32 38]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
