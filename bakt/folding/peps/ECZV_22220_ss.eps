%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 11 290 689 411
%%HiResBoundingBox: 11.500000 290.500000 689.000000 410.500000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:49 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGUCGGAUAAGGCGUUUAUGCCGCAUCCGACAUCAACGCCUGAUGCGACGCUUAACGCGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def
/coor [
[84.26638794 125.13127136]
[72.53852081 111.18009186]
[57.66684723 113.13798523]
[42.79517365 115.09587860]
[27.92350006 117.05377197]
[13.05182838 119.01165771]
[-1.81984484 120.96955109]
[-16.69151688 122.92744446]
[-26.30737305 135.18196106]
[-41.41725540 136.95568848]
[-53.04080200 127.71292114]
[-67.91247559 129.67080688]
[-82.78414917 131.62870789]
[-92.20513916 144.31808472]
[-107.85153198 146.54650879]
[-120.44060516 136.99188232]
[-122.50347900 121.32280731]
[-112.81628418 108.83545685]
[-97.12627411 106.93836212]
[-84.74204254 116.75703430]
[-69.87036896 114.79914093]
[-54.99869537 112.84124756]
[-46.16341400 100.90502167]
[-31.10931396 98.70758820]
[-18.64941025 108.05577087]
[-3.77773762 106.09787750]
[11.09393501 104.13999176]
[25.96560860 102.18209839]
[40.83728027 100.22420502]
[55.70895386 98.26631165]
[70.58062744 96.30841827]
[74.25823212 85.28644562]
[81.88903809 76.52404785]
[92.30116272 71.36688995]
[103.89560699 70.60694885]
[114.89179993 74.36093140]
[123.60103607 82.05234528]
[128.68583679 92.50000000]
[143.68583679 92.50000000]
[158.68583679 92.50000000]
[173.68583679 92.50000000]
[188.68583679 92.50000000]
[203.68583679 92.50000000]
[218.68583679 92.50000000]
[233.68583679 92.50000000]
[247.48600769 84.76270294]
[260.21328735 92.50000000]
[275.21328735 92.50000000]
[290.21328735 92.50000000]
[305.21328735 92.50000000]
[320.21328735 92.50000000]
[332.52850342 82.21823120]
[348.21600342 85.57711029]
[355.24166870 100.00000000]
[348.21600342 114.42288971]
[332.52850342 117.78176880]
[320.21328735 107.50000000]
[305.21328735 107.50000000]
[290.21328735 107.50000000]
[275.21328735 107.50000000]
[260.21328735 107.50000000]
[247.48600769 115.23729706]
[233.68583679 107.50000000]
[218.68583679 107.50000000]
[203.68583679 107.50000000]
[188.68583679 107.50000000]
[173.68583679 107.50000000]
[158.68583679 107.50000000]
[143.68583679 107.50000000]
[128.68583679 107.50000000]
[118.87929535 122.86262512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[38 70]
[39 69]
[40 68]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
