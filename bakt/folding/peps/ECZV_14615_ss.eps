%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 11 263 689 438
%%HiResBoundingBox: 11.000000 263.000000 689.000000 437.500000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGCCGGAUAAGACGUUCACGCCGCAUCCGGCAACUGCGCCAUAAUGCCUGAUGCGACGCUAAACGCGUCUUUUCAGGCG\
) } def
/len { sequence length } bind def
/coor [
[79.86926270 134.78364563]
[64.03529358 117.93566895]
[49.59846115 122.00727081]
[35.16163254 126.07888031]
[20.72480392 130.15048218]
[6.28797579 134.22209167]
[-8.14885235 138.29370117]
[-22.58568192 142.36531067]
[-30.34359360 155.87280273]
[-45.04259109 159.79634094]
[-57.87211990 152.31710815]
[-69.05394745 163.50984192]
[-83.40359497 159.51773071]
[-97.84042358 163.58934021]
[-108.88978577 175.70724487]
[-124.84878540 171.93334961]
[-129.30017090 156.14990234]
[-117.66474915 144.59356689]
[-101.91203308 149.15251160]
[-87.47520447 145.08090210]
[-77.32598877 134.17939758]
[-61.94372559 137.88027954]
[-54.91263962 124.79978943]
[-40.32964325 120.46494293]
[-26.65728760 127.92848206]
[-12.22045994 123.85687256]
[2.21636891 119.78526306]
[16.65319824 115.71366119]
[31.09002686 111.64205170]
[45.52685547 107.57044220]
[59.96368408 103.49884033]
[60.12987900 94.94806671]
[62.10162735 86.62607574]
[65.78962708 78.90973663]
[71.02687836 72.14848328]
[77.57620239 66.64851379]
[85.14099884 62.65888977]
[93.37870026 60.36028671]
[101.91625214 59.85680008]
[110.36702728 61.17123032]
[118.34832001 64.24405670]
[125.49869537 68.93611145]
[131.49433899 75.03492737]
[136.06375122 82.26430511]
[138.99996948 90.29685211]
[140.17004395 98.76882172]
[154.98536682 101.11534119]
[169.80070496 103.46185303]
[184.61602783 105.80837250]
[199.43135071 108.15489197]
[214.24667358 110.50140381]
[225.23202515 99.70195770]
[240.29399109 97.46791077]
[253.62562561 104.44869232]
[260.21151733 117.78152466]
[275.02682495 120.12803650]
[289.84216309 122.47455597]
[304.65747070 124.82107544]
[319.47280884 127.16758728]
[333.24484253 118.93893433]
[348.21374512 124.71052551]
[352.89666748 140.05490112]
[343.70126343 153.20115662]
[327.68145752 154.06462097]
[317.12628174 141.98291016]
[302.31097412 139.63639832]
[287.49563599 137.28988647]
[272.68029785 134.94335938]
[257.86499023 132.59684753]
[247.48136902 143.24197388]
[232.64505005 145.76138306]
[219.01063538 138.98228455]
[211.90016174 125.31673431]
[197.08482361 122.97021484]
[182.26950073 120.62369537]
[167.45417786 118.27718353]
[152.63885498 115.93066406]
[137.82353210 113.58414459]
[124.07957458 132.17642212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[13 20]
[14 19]
[46 78]
[47 77]
[48 76]
[49 75]
[50 74]
[51 73]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
