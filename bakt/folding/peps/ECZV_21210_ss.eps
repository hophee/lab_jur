%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 11 271 689 430
%%HiResBoundingBox: 11.000000 271.000000 689.000000 430.000000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGUCGGAUAAGGCGUUCAUGCCGCAUCUGACAAUAACAGCAUUGCCUGAUGCGACGCUGUUGUGUCUUAUCAGGCC\
) } def
/len { sequence length } bind def
/coor [
[80.11343384 132.21266174]
[65.49288940 115.56890106]
[50.86897278 118.90671539]
[36.24505615 122.24452972]
[21.62113571 125.58234406]
[6.99721766 128.92015076]
[-7.62670135 132.25796509]
[-22.25061989 135.59577942]
[-30.68034744 148.69453430]
[-45.55862808 151.87123108]
[-57.99434280 143.75405884]
[-72.61826324 147.09187317]
[-87.24217987 150.42968750]
[-95.43729401 163.94322205]
[-110.80729675 167.62271118]
[-124.23342896 159.28518677]
[-127.75021362 143.87713623]
[-119.27120209 130.53990173]
[-103.82684326 127.18621826]
[-90.57999420 135.80577087]
[-75.95607758 132.46795654]
[-61.33215714 129.13014221]
[-53.64987946 116.42115784]
[-38.86669540 112.82781219]
[-25.58843422 120.97186279]
[-10.96451569 117.63404846]
[3.65940332 114.29623413]
[18.28332138 110.95841980]
[32.90724182 107.62060547]
[47.53115845 104.28279114]
[62.15507889 100.94497681]
[63.00891495 91.95072937]
[65.96961975 83.41493988]
[70.86856079 75.82376862]
[77.42671204 69.60957336]
[85.27055359 65.12630463]
[93.95333099 62.62930679]
[102.98049164 62.26079178]
[111.83790588 64.04175568]
[120.02107239 67.87076569]
[127.06391907 73.52972412]
[132.56530762 80.69633484]
[136.21191406 88.96239471]
[137.79602051 97.85712433]
[152.64334106 99.99184418]
[167.49066162 102.12657166]
[182.33798218 104.26129150]
[197.18530273 106.39601135]
[212.03262329 108.53073883]
[226.87994385 110.66545868]
[241.72726440 112.80017853]
[256.48809814 107.10560608]
[267.98471069 116.57543182]
[282.83203125 118.71015167]
[297.67935181 120.84487152]
[312.52667236 122.97959900]
[327.37399292 125.11431885]
[342.38903809 118.52036285]
[355.44515991 128.44357300]
[353.11129761 144.67579651]
[337.78836060 150.51872253]
[325.23925781 139.96163940]
[310.39193726 137.82691956]
[295.54461670 135.69219971]
[280.69729614 133.55747986]
[265.84997559 131.42274475]
[252.15112305 137.27001953]
[239.59254456 127.64749908]
[224.74522400 125.51277924]
[209.89790344 123.37805939]
[195.05058289 121.24333191]
[180.20326233 119.10861206]
[165.35594177 116.97389221]
[150.50862122 114.83916473]
[135.66130066 112.70444489]
[122.44602966 130.48454285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[44 75]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[50 69]
[51 68]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
