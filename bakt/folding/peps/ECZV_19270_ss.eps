%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 303 10 397 691
%%HiResBoundingBox: 303.000000 10.000000 396.500000 691.000000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGCCGGAUAAGACGUUUACGCCGCAUCCGGCAUUUGUGCGCUGAUGCCUGAUGCGACGCUGACGCGUCUUAUCAUGCC\
) } def
/len { sequence length } bind def
/coor [
[94.32827759 355.26409912]
[94.32827759 340.26409912]
[94.32827759 325.26409912]
[83.64740753 314.94641113]
[83.43372345 299.73428345]
[94.32827759 288.60116577]
[94.32827759 273.60116577]
[94.32827759 258.60116577]
[94.32827759 243.60116577]
[94.32827759 228.60116577]
[94.32827759 213.60116577]
[94.32827759 198.60116577]
[94.32827759 183.60116577]
[94.32827759 168.60116577]
[94.32827759 153.60116577]
[94.03004456 138.60412598]
[93.43370056 123.61598969]
[92.83734894 108.62784576]
[91.94312286 93.65452576]
[90.75137329 78.70194244]
[81.94210052 65.56012726]
[88.64376068 52.25835800]
[87.45201111 37.30577469]
[86.26025391 22.35319138]
[85.06850433 7.40060854]
[83.87675476 -7.55197382]
[82.68499756 -22.50455666]
[73.87573242 -35.64637375]
[80.57738495 -48.94814301]
[79.38563538 -63.90072632]
[78.19388580 -78.85330963]
[77.00212860 -93.80589294]
[75.81037903 -108.75847626]
[74.61862946 -123.71105957]
[61.31034088 -131.69035339]
[55.26481628 -145.98130798]
[58.80668259 -161.08874512]
[70.57401276 -171.20356750]
[86.04203796 -172.43640137]
[99.26297760 -164.31320190]
[105.15312195 -149.95750427]
[101.44757843 -134.88937378]
[89.57120514 -124.90280914]
[90.76296234 -109.95022583]
[91.95471191 -94.99764252]
[93.14646912 -80.04505920]
[94.33821869 -65.09247589]
[95.52996826 -50.13989639]
[104.25399780 -38.06758499]
[97.63758087 -23.69630814]
[98.82933044 -8.74372673]
[100.02108765 6.20885611]
[101.21283722 21.16143799]
[102.40459442 36.11402130]
[103.59634399 51.06660461]
[112.32036591 63.13891220]
[105.70395660 77.51019287]
[106.89570618 92.46277618]
[110.71329498 99.83163452]
[107.82549286 108.03150177]
[108.42183685 123.01963806]
[109.01818848 138.00778198]
[112.56526184 146.72776794]
[109.32827759 153.60116577]
[109.32827759 168.60116577]
[109.32827759 183.60116577]
[109.32827759 198.60116577]
[109.32827759 213.60116577]
[109.32827759 228.60116577]
[109.32827759 243.60116577]
[109.32827759 258.60116577]
[109.32827759 273.60116577]
[109.32827759 288.60116577]
[120.22283173 299.73428345]
[120.00914764 314.94641113]
[109.32827759 325.26409912]
[109.32827759 340.26409912]
[109.32827759 355.26409912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[16 62]
[17 61]
[18 60]
[19 58]
[20 57]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
