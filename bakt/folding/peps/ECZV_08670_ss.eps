%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 319 10 381 691
%%HiResBoundingBox: 319.500000 10.000000 381.000000 691.000000
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%DocumentFonts: Helvetica
%%EndComments
% EPSF created by ps2eps 1.70
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
% Program options: -d2 -T 38.000000 
% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file
/RNAplot 100 dict def
RNAplot begin
%%BeginProlog
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
%%EndProlog
% data start here
/sequence { (\
GGCCGGAUAAGGCGUUUUACGCCGCAUCCGGCAUUCAGUGCCUGAUGCGACGCUGGCGCGUCUUAUCGGGCC\
) } def
/len { sequence length } bind def
/coor [
[92.50000000 371.39904785]
[92.50000000 356.39904785]
[92.50000000 341.39904785]
[92.50000000 326.39904785]
[84.76270294 313.67178345]
[92.50000000 299.87161255]
[92.50000000 284.87161255]
[92.50000000 269.87161255]
[92.50000000 254.87159729]
[92.50000000 239.87159729]
[92.50000000 224.87159729]
[92.50000000 209.87159729]
[92.50000000 194.87159729]
[92.50000000 179.87159729]
[92.50000000 164.87159729]
[84.76270294 152.14433289]
[92.50000000 138.34414673]
[92.50000000 123.34415436]
[92.50000000 108.34415436]
[92.17726135 93.34762573]
[91.53192139 78.36151886]
[83.20807648 64.90699768]
[90.39065552 51.85863113]
[89.74532318 36.87252045]
[89.09999084 21.88640785]
[88.45465088 6.90029716]
[87.80931854 -8.08581448]
[87.16398621 -23.07192612]
[78.84013367 -36.52644730]
[86.02272034 -49.57481003]
[85.37738800 -64.56092072]
[84.73204803 -79.54703522]
[84.08671570 -94.53314209]
[83.44138336 -109.51925659]
[76.71920776 -125.08359528]
[89.81440735 -135.85169983]
[103.78680420 -126.24918365]
[98.42749786 -110.16458893]
[99.07283020 -95.17847443]
[99.71816254 -80.19236755]
[100.36349487 -65.20625305]
[101.00882721 -50.22014236]
[109.28652191 -37.83753204]
[102.15010071 -23.71726036]
[102.79543304 -8.73114777]
[103.44076538 6.25496340]
[104.08609772 21.24107552]
[104.73143005 36.22718811]
[105.37677002 51.21329880]
[113.65445709 63.59590912]
[106.51803589 77.71617889]
[107.16336823 92.70229340]
[110.72009277 100.23554993]
[107.50000000 108.34415436]
[107.50000000 123.34415436]
[107.50000000 138.34414673]
[115.23729706 152.14433289]
[107.50000000 164.87159729]
[107.50000000 179.87159729]
[107.50000000 194.87159729]
[107.50000000 209.87159729]
[107.50000000 224.87159729]
[107.50000000 239.87159729]
[107.50000000 254.87159729]
[107.50000000 269.87161255]
[107.50000000 284.87161255]
[107.50000000 299.87161255]
[115.23729706 313.67178345]
[107.50000000 326.39904785]
[107.50000000 341.39904785]
[107.50000000 356.39904785]
[107.50000000 371.39904785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[6 67]
[7 66]
[8 65]
[9 64]
[10 63]
[11 62]
[12 61]
[13 60]
[14 59]
[15 58]
[17 56]
[18 55]
[19 54]
[20 52]
[21 51]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
] def
init
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
