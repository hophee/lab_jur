%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Mon Jul 21 11:46:48 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 -T 38.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUGAUAAGACGCGUAAGCGUCGCAUCAGGCAAUGGUGCUCGGAUGCCGGAUGCGGCGUAAACGCCUUAUCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[86.90919495 324.47802734]
[86.90919495 309.47802734]
[86.90919495 294.47802734]
[86.90919495 279.47802734]
[79.17189789 266.75076294]
[86.90919495 252.95059204]
[86.90919495 237.95059204]
[86.90919495 222.95059204]
[86.90919495 207.95059204]
[86.90919495 192.95059204]
[86.90919495 177.95059204]
[84.02429199 173.83329773]
[83.89022064 167.80371094]
[87.55296326 161.77069092]
[88.74471283 146.81811523]
[89.93646240 131.86552429]
[91.12821960 116.91294861]
[81.80911255 105.81788635]
[82.96030426 91.37416840]
[93.91919708 81.89530182]
[95.11095428 66.94271851]
[96.30270386 51.99013519]
[97.49445343 37.03755188]
[98.68621063 22.08497047]
[99.87796021 7.13238811]
[101.06971741 -7.82019424]
[102.26146698 -22.77277756]
[103.45321655 -37.72536087]
[104.64497375 -52.67794037]
[98.02855682 -67.04921722]
[106.75257874 -79.12152863]
[107.94433594 -94.07411194]
[109.13608551 -109.02669525]
[110.32783508 -123.97927856]
[103.71142578 -138.35055542]
[112.43544769 -150.42286682]
[105.81903076 -164.79414368]
[114.54306030 -176.86645508]
[107.01299286 -191.43457031]
[116.09089661 -205.09193420]
[132.43820190 -203.78901672]
[139.23820496 -188.86614990]
[129.49563599 -175.67469788]
[136.19729614 -162.37292480]
[127.38803101 -149.23110962]
[134.08969116 -135.92933655]
[125.28041840 -122.78752136]
[124.08866882 -107.83493805]
[122.89691925 -92.88236237]
[121.70516205 -77.92977905]
[128.40681458 -64.62800598]
[119.59755707 -51.48619080]
[118.40579987 -36.53360748]
[117.21405029 -21.58102417]
[116.02229309 -6.62844181]
[114.83054352 8.32414055]
[113.63879395 23.27672386]
[112.44703674 38.22930527]
[111.25528717 53.18188858]
[110.06353760 68.13446808]
[108.87178040 83.08705139]
[118.19088745 94.18211365]
[117.03969574 108.62583160]
[106.08080292 118.10469818]
[104.88904572 133.05728149]
[103.69729614 148.00985718]
[102.50554657 162.96244812]
[101.90919495 177.95059204]
[101.90919495 192.95059204]
[101.90919495 207.95059204]
[101.90919495 222.95059204]
[101.90919495 237.95059204]
[101.90919495 252.95059204]
[109.64649963 266.75076294]
[101.90919495 279.47802734]
[101.90919495 294.47802734]
[101.90919495 309.47802734]
[101.90919495 324.47802734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[14 67]
[15 66]
[16 65]
[17 64]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[31 50]
[32 49]
[33 48]
[34 47]
[36 45]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
